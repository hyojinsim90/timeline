plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.timeline'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    // 스프링부트용 spring data jpa 추상화 라이브러리. jpa 관련 라이브러리들의 버전을 알아서 관리해줌.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // 인메모리 관계형 데이타베이스. 애플리케이션 재시작할때마다 초기화됨.
    implementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // 로그인 등 구현 시 필요한 의존성
//    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.2'

    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.2.6.RELEASE'

    // AWS S3
//    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.6.RELEASE'

    // 파일 처리 관련
    implementation 'commons-io:commons-io:2.6'

    // unknown enum constant When.MAYBE 해결
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // mysql
    implementation group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.3.7.Final'
    runtimeOnly 'mysql:mysql-connector-java'

}

def webappDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/build","$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "buildReact"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
    //dependsOn "copyReport"
}

//task copyReport(type: Copy) {
//    from file("$webappDir/build")
//    into file("$projectDir/src/main/resources")
//}

task installReact(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "audit", "fix"
        commandLine "npm", "run-script", "build"
        commandLine "npm", "install"
    }
}

test {
    useJUnitPlatform()
}
