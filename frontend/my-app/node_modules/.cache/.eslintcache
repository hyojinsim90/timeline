[{"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\index.js":"1","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\App.js":"2","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_reducers\\index.js":"4","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\hoc\\auth.js":"5","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\NavBar\\NavBar.js":"6","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\AuthPage\\FindPwPage.js":"7","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\AuthPage\\SignupPage.js":"8","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\MyPage.js":"9","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\MyTimeline.js":"10","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\AuthPage\\LoginPage.js":"11","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\MyInfo.js":"12","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\CreateTimeline\\CreateTimeline.js":"13","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\TimelinePage\\TimelinePage.js":"14","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_reducers\\user_reducer.js":"15","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\Sections\\MenuBar.js":"16","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\CreateTimeline\\Sections\\TimelineDetail.js":"17","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\CreateTimeline\\Sections\\TimelineView.js":"18","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_actions\\types.js":"19","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_actions\\user_actions.js":"20"},{"size":1145,"mtime":1622367469009,"results":"21","hashOfConfig":"22"},{"size":1485,"mtime":1622136500000,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1622136500000,"results":"24","hashOfConfig":"22"},{"size":152,"mtime":1622136500000,"results":"25","hashOfConfig":"22"},{"size":1662,"mtime":1622136500000,"results":"26","hashOfConfig":"22"},{"size":4619,"mtime":1622136500000,"results":"27","hashOfConfig":"22"},{"size":1830,"mtime":1622136500000,"results":"28","hashOfConfig":"22"},{"size":2767,"mtime":1622136500000,"results":"29","hashOfConfig":"22"},{"size":165,"mtime":1622136500000,"results":"30","hashOfConfig":"22"},{"size":1226,"mtime":1622136500000,"results":"31","hashOfConfig":"22"},{"size":3015,"mtime":1622136500000,"results":"32","hashOfConfig":"22"},{"size":4876,"mtime":1622136500000,"results":"33","hashOfConfig":"22"},{"size":7624,"mtime":1622136500000,"results":"34","hashOfConfig":"22"},{"size":5185,"mtime":1622136500000,"results":"35","hashOfConfig":"22"},{"size":292,"mtime":1622136500000,"results":"36","hashOfConfig":"22"},{"size":2011,"mtime":1622136500000,"results":"37","hashOfConfig":"22"},{"size":1974,"mtime":1622136500000,"results":"38","hashOfConfig":"22"},{"size":620,"mtime":1622136500000,"results":"39","hashOfConfig":"22"},{"size":37,"mtime":1622136500000,"results":"40","hashOfConfig":"22"},{"size":231,"mtime":1622136500000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lxwwjr",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\index.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\App.js",[],["89","90"],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_reducers\\index.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\hoc\\auth.js",["91"],"import React, { useEffect } from \"react\"\nimport { auth } from \"../_actions/user_actions\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\n\nexport default function authHoc(SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n      const [cookies, setCookie] = useCookies([])\n      let user = useSelector(state => state.user)\n      const dispatch = useDispatch()\n\n      useEffect(() => {\n          if (!cookies.tl_e || !cookies.tl_token || !cookies.tl_re || !cookies.tl_exp) {\n            if (option) {\n              props.history.push(\"/login\")\n            }\n            } else {\n              const date = new Date()\n              const expTime = parseInt(cookies.tl_exp)\n\n              const tokens = {\n                \"accessToken\": cookies.tl_token,\n                \"refreshToken\": cookies.tl_re\n              }\n\n              if(date.getTime() > expTime) {\n                Axios.post(\"/auth/reissue\", tokens)\n                  .then(res => {\n                    setCookie(\"tl_token\", res.data.accessToken)\n                    setCookie(\"tl_exp\", res.data.accessTokenExpiresIn)\n                    setCookie(\"tl_re\", res.data.refreshToken)\n                  })\n                }\n\n              // member 정보 가져오기 위해 header에 token 담아서 넘김\n              Axios.defaults.headers.common['Authorization'] = `Bearer ${cookies.tl_token}`\n              dispatch(auth(cookies.tl_e))\n            }\n      }, [cookies])\n\n      return (\n        <SpecificComponent {...props} user={user} />\n      )\n    }\n  return AuthenticationCheck\n}\n","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\NavBar\\NavBar.js",["92","93"],"import React, { useState, useEffect } from 'react'\nimport { Menu, Button } from 'antd'\nimport styled from 'styled-components'\nimport { BrowserView, MobileView } from 'react-device-detect'\nimport { MenuOutlined, MenuFoldOutlined } from '@ant-design/icons'\nimport { Link } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\n\nconst Logo =  styled.div`\n  font-weight: bold;\n  font-size: 3.5vh;\n  padding: 1rem;\n  span {\n    color: #f0f0f0;\n  }\n  a {\n    color: black !important;\n  }\n  + div {\n    border-bottom: 1px solid #f0f0f0;\n  }\n`;\n\nconst MenuList = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst LogoM = styled.div`\n  font-weight: bold;\n  font-size: 3.5vh;\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  span {\n    color: #f0f0f0;\n  }\n  a {\n    color: black !important;\n  }\n\n  Button {\n    background: black !important;\n    border: none;\n  }\n`;\n\nconst NavBar = (props) => {\n\n  const [toggleMenu, setToggleMenu] = useState(false)\n  const [toggleBar, setToggleBar] = useState(true)\n  const [cookies, setCookie, removeCookie] = useCookies([])\n  const [auth, setAuth] = useState(false)\n\n  useEffect(() => {\n    if(cookies.tl_token !== undefined) {\n      setAuth(true)\n    }\n  }, [cookies])\n\n  const toggleChange = () => {\n    setToggleMenu(!toggleMenu)\n    setToggleBar(!toggleBar)\n  }\n\n  const onMenuClick = () => {\n    setToggleMenu(!toggleMenu)\n    setToggleBar(!toggleBar)\n  }\n\n  const onLogout = () => {\n    if(auth && cookies.tl_e) {\n      Axios.get(`/auth/logout/${cookies.tl_e}`)\n        .then(res => {\n          removeCookie(\"tl_e\")\n          removeCookie(\"tl_re\")\n          removeCookie(\"tl_exp\")\n          removeCookie(\"tl_token\")\n          window.location.reload()\n          props.history(\"/login\")\n        })\n    }\n  }\n\n  return(\n    <div>\n      <BrowserView>\n        <Logo>\n          <Link to=\"/\">\n            TI<span>MELI</span>NE\n          </Link>\n        </Logo>\n        <MenuList>\n          <Menu selectedKeys=\"mail\" mode=\"horizontal\">\n            <Menu.Item key=\"timeline\">\n              타임라인\n            </Menu.Item>\n            <Menu.Item key=\"class\">\n              클래스\n            </Menu.Item>\n          </Menu>\n          <Menu mode=\"horizontal\">\n            <Menu.Item key=\"mypage\">\n              <Link to=\"/mypage\">\n                마이페이지\n              </Link>\n            </Menu.Item>\n            { auth ?\n            <>\n              <Menu.Item key=\"logout\" onClick={onLogout}>\n                로그아웃\n              </Menu.Item>\n            </>\n            :\n            <>\n              <Menu.Item key=\"login\">\n                <Link to=\"/login\">\n                  로그인\n                </Link>\n              </Menu.Item>\n              <Menu.Item key=\"signup\">\n                <Link to=\"/signup\">\n                  회원가입\n                </Link>\n              </Menu.Item>\n            </>\n            }\n          </Menu>\n        </MenuList>\n      </BrowserView>\n      <MobileView>\n        <LogoM>\n          <Link to=\"/\">\n            TI<span>MELI</span>NE\n          </Link>\n          <div >\n            <Button type=\"primary\" onClick={toggleChange} style={{ marginBottom: 16 }}>\n              { toggleBar ? <MenuOutlined /> : <MenuFoldOutlined /> }\n            </Button>\n          </div>\n        </LogoM>\n        { toggleMenu ?\n          <Menu\n            defaultSelectedKeys={['1']}\n            mode=\"inline\"\n            theme=\"light\"\n            inlineCollapsed={toggleBar}\n            onClick={onMenuClick}\n          >\n            <Menu.Item key=\"timeline\">\n              타임라인\n            </Menu.Item>\n            <Menu.Item key=\"class\">\n              클래스\n            </Menu.Item>\n            <Menu.Item key=\"mypage\">\n              <Link to=\"/mypage\">\n                마이페이지\n              </Link>\n            </Menu.Item>\n            { auth ?\n              <>\n                <Menu.Item key=\"logout\" onClick={onLogout}>\n                  로그아웃\n                </Menu.Item>\n              </>\n              :\n              <>\n                <Menu.Item key=\"login\">\n                  <Link to=\"/login\">\n                    로그인\n                  </Link>\n                </Menu.Item>\n                <Menu.Item key=\"signup\">\n                  <Link to=\"/signup\">\n                    회원가입\n                  </Link>\n                </Menu.Item>\n              </>\n            }\n          </Menu>\n          : <></>\n        }\n      </MobileView>\n    </div>\n  )\n}\n\nexport default NavBar;\n","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\AuthPage\\FindPwPage.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\AuthPage\\SignupPage.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\MyPage.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\MyTimeline.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\AuthPage\\LoginPage.js",["94"],"import React, { useState } from \"react\"\nimport { Form, Input, Button } from \"antd\"\nimport styled from \"styled-components\"\nimport { useHistory } from \"react-router-dom\"\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\nimport { Link } from \"react-router-dom\"\n\nconst LoginDiv = styled.div`\n  padding: 3rem 0;\n  form {\n    width: 320px;\n    display: inline-block;\n    .ant-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      .ant-form-item-label {\n        text-align: center;\n      }\n    }\n    // 비밀번호 찾기 영역\n    .ant-form-item:nth-child(2) {\n      margin-bottom: 0;\n      & + .ant-form-item .ant-col {\n        text-align: right;\n        #search {\n          color: lightgray !important;\n        }\n      }\n    }\n    label {\n      margin-bottom: 1rem;\n    }\n    .ant-input-password {\n      height: 32px;\n      input {\n        height: 100%;\n      }\n    }\n    button {\n      width: 100%;\n      background: black;\n      color: #ffffff;\n      margin-top: 1rem;\n    }\n  }\n`;\n\nconst LoginPage = () => {\n\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState(\"\")\n  const [cookies, setCookie] = useCookies(\"\")\n\n  const history = useHistory()\n\n  const onChangeEmail = (e) => {\n    setEmail(e.target.value)\n  }\n\n  const onChangePwd = (e) => {\n    setPassword(e.target.value)\n  }\n\n  const onLogin = () => {\n\n    var variables = {\n      \"email\": email,\n      \"password\": password\n    }\n\n    Axios.post(\"/auth/login\", variables)\n      .then(res => {\n        setCookie(\"tl_token\", res.data.accessToken)\n        setCookie(\"tl_exp\", res.data.accessTokenExpiresIn)\n        setCookie(\"tl_e\", email)\n        setCookie(\"tl_re\", res.data.refreshToken)\n        history.push(\"/mypage\")\n        window.location.reload()\n      })\n      .catch(err => {\n        setErrorMessage(\"이메일이나 비밀번호를 다시 확인해 주세요\")\n      })\n  }\n\n  return (\n    <LoginDiv>\n      <h1>로그인</h1>\n      <br />\n      <Form>\n        <Form.Item\n          label=\"이메일 주소:\"\n          name=\"email\"\n          rules={[{ required: true }]}\n        >\n          <Input value={email} onChange={onChangeEmail} />\n        </Form.Item>\n        <Form.Item\n          label=\"비밀번호:\"\n          name=\"password\"\n          rules={[{ required: true }]}\n        >\n          <Input.Password value={password} onChange={onChangePwd} />\n        </Form.Item>\n        <Form.Item name=\"search\">\n          <Link to=\"/findpw\">\n            비밀번호 찾기\n          </Link>\n        </Form.Item>\n        {errorMessage && (\n          <label><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{errorMessage}</p></label>\n        )}\n        <Form.Item>\n          <Button size=\"large\" onClick={onLogin}>\n            로그인\n          </Button>\n        </Form.Item>\n      </Form>\n    </LoginDiv>\n  )\n}\n\nexport default LoginPage;\n","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\MyInfo.js",["95"],"import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { Form, Input, Button } from \"antd\"\nimport { useSelector } from \"react-redux\"\nimport Axios from \"axios\"\nimport MenuBar from \"./Sections/MenuBar\"\n\nconst InfoDiv = styled.div`\n  padding: 3rem 0;\n  form {\n    width: 320px;\n    display: inline-block;\n    .ant-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      .ant-form-item-label {\n        text-align: center;\n      }\n    }\n    // 닉네임 영역\n    #nickname {\n      display: flex;\n    }\n    label {\n      margin-bottom: 1rem;\n    }\n    .ant-input-password {\n      height: 32px;\n      input {\n        height: 100%;\n      }\n    }\n    .ant-form-item:last-child {\n      button {\n        width: 100%;\n        background: black;\n        color: #ffffff;\n        margin-top: 1rem;\n      }\n    }\n  }\n`;\n\n\nconst MyInfo = () => {\n\n  const [email, setEmail] = useState(\"\")\n  const [nickname, setNickname] = useState([])\n  const [password1, setPassword1] = useState(\"\")\n  const [password2, setPassword2] = useState(\"\")\n  const [existingPw, setExistingPw] = useState(\"\")\n  const [checkDuplicate, setCheckDuplicate] = useState(false)\n  const [checkValid, setCheckValid] = useState(true)\n\n  const user = useSelector(state => state.user.userData)\n\n  useEffect(() => {\n    if(user !== undefined) {\n      setEmail(user.email)\n      setNickname(user.nickname)\n\n      Axios.get(`/member/${user.email}`)\n        .then(res => {\n          setExistingPw(res.data.password)\n        })\n    }\n  }, [user])\n\n  const onChangeNick = (e) => {\n    setNickname(e.target.value)\n  }\n\n  const onChangePwd1 = (e) => {\n    setPassword1(e.target.value)\n  }\n\n  const onChangePwd2 = (e) => {\n    setPassword2(e.target.value)\n  }\n\n  // 중복확인 체크\n  const onCheckDup = () => {\n    Axios.get(\"/member/ids\")\n      .then(res => {\n        const duplicate = res.data.filter(item => item.nickname === nickname)\n        // 닉네임 중복일 경우\n        if(duplicate.length > 0) {\n          // 다른 사람 닉네임과 중복일 경우\n          if(nickname !== user.nickname) {\n            setCheckDuplicate(false)\n            alert(\"이미 있는 닉네임입니다\")\n          // 내 기존 닉네임일 경우\n          } else {\n            setCheckDuplicate(true)\n            alert(\"사용할 수 있는 닉네임입니다\")\n          }\n        } else {\n          setCheckDuplicate(true)\n          alert(\"사용할 수 있는 닉네임입니다\")\n        }\n      })\n  }\n\n  const onChangeInfo = () => {\n\n      // 닉네임 중복확인 버튼 클릭하도록 하기\n    if(checkDuplicate === false) {\n      alert(\"닉네임 중복확인을 해주세요\")\n      return false\n    } else if(password1 || password2) {\n      if(password1 !== password2) {\n        alert(\"비밀번호와 비밀번호 확인이 일치하지 않습니다\")\n        return false\n      }\n    }\n\n    const variables = {\n      \"nickname\": nickname,\n      \"password\": password1 ? password1 : existingPw\n    }\n\n    if(checkDuplicate && checkValid) {\n      Axios.put(`/member/${email}`, variables)\n        .then(res => {\n          // 닉네임, 비밀번호 변경 성공 시 페이지 새로고침\n          if(res.status === 200) {\n            window.location.reload()\n          }\n        })\n    }\n  }\n\n  return (\n    <div>\n      <MenuBar />\n      <InfoDiv>\n        <Form>\n          <Form.Item\n            label=\"이메일:\"\n            name=\"email\"\n            rules={[{ required: true }]}\n          >\n            <div>\n              { email &&\n                <Input value={email} disabled />\n              }\n            </div>\n          </Form.Item>\n          <Form.Item\n            label=\"닉네임:\"\n            name=\"nickname\"\n            rules={[{ required: true }]}\n          >\n            <div>\n              <Input value={nickname} onChange={onChangeNick} />\n              <Button onClick={onCheckDup}>중복확인</Button>\n            </div>\n          </Form.Item>\n          <Form.Item\n            label=\"비밀번호(8~16자):\"\n            name=\"password1\"\n            rules={[{ required: true, min: 8, max: 16, message: '다시 입력해 주세요' }]}\n          >\n            <Input.Password value={password1} onChange={onChangePwd1} />\n          </Form.Item>\n          <Form.Item\n            label=\"비밀번호 확인(8~16자):\"\n            name=\"password2\"\n            rules={[{ required: true, min: 8, max: 16, message: '다시 입력해 주세요' }]}\n          >\n            <Input.Password value={password2} onChange={onChangePwd2} />\n          </Form.Item>\n          <Form.Item\n            name=\"button\"\n          >\n            <Button size=\"large\" onClick={onChangeInfo}>\n              수정하기\n            </Button>\n          </Form.Item>\n        </Form>\n      </InfoDiv>\n    </div>\n  )\n}\n\nexport default MyInfo\n","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\CreateTimeline\\CreateTimeline.js",["96","97"],"import React, { useState } from \"react\"\nimport styled from \"styled-components\"\nimport { Form, Input, Select, Button, DatePicker, Divider } from \"antd\"\nimport { Link } from \"react-router-dom\"\nimport Axios from \"axios\"\nimport { PlusCircleOutlined } from \"@ant-design/icons\"\nimport TimelineDetail from \"./Sections/TimelineDetail\"\nimport { useSelector } from \"react-redux\"\nimport TimelineView from \"./Sections/TimelineView\"\n\nconst CreateTimelineDiv = styled.div`\n  padding: 3rem 0;\n  form {\n    width: 320px;\n    display: inline-block;\n    .ant-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      .ant-form-item-label {\n        text-align: center;\n      }\n    }\n    label {\n      margin-bottom: 1rem;\n    }\n    a button {\n      width: 100%;\n      background: black;\n      color: #ffffff;\n      margin-top: 100px;\n    }\n  }\n`\n\nconst { Option } = Select\n\nconst CreateTimeline = () => {\n  const [title, setTitle] = useState(\"\")\n  const [countList, setCountList] = useState([0])\n  const [detailTitle, setDetailTitle] = useState([])\n  const [detailDate, setDetailDate] = useState([])\n  const [detailDateString, setDetailDateString] = useState([])\n  const [detailContent, setDetailContent] = useState([])\n  const [category, setCategory] = useState(\"경제\")\n  const [complete, setComplete] = useState(false)\n  const [open, setOpen] = useState(false)\n\n  const user = useSelector(state => state.user)\n\n  const onCreateTimeline = (e) => {\n    let variables = {\n      \"author\": user.userData.email,\n      \"category\": category,\n      \"complete\": complete,\n      \"open\": open,\n      \"title\": title\n    }\n\n    let detailList = []\n    let valid = true\n\n    // 타임라인이 하나도 없을 때\n    if(countList.length === 0) {\n      alert(\"1개 이상의 타임라인을 작성해 주세요\")\n      return false\n    } else if(!title) {\n      alert(\"제목을 작성해 주세요\")\n      return false\n    }\n\n    // 타임라인 상세 내용 유효성 검사\n    countList.forEach((item, i) => {\n      if(detailTitle[i] === undefined || detailTitle[i] === \"\") {\n        alert(\"타임라인 제목을 입력해 주세요\")\n        valid = false\n      } else if(detailContent[i] === undefined || detailContent[i] === \"\") {\n        alert(\"타임라인 내용을 입력해 주세요\")\n        valid = false\n      } else if(detailDate[i] === undefined || detailDate[i] === \"\") {\n        alert(\"타임라인 날짜를 입력해 주세요\")\n        valid = false\n      }\n    })\n\n    if(valid) {\n      Axios.post(\"/timeline/master/save\", variables)\n        .then(res => {\n          // master에서 id값 return하면 받아서 detail 저장\n          if(res.data.id) {\n            countList.forEach((item, i) => {\n              let year = detailDate[i]._d.getFullYear().toString()\n              let month = (detailDate[i]._d.getMonth() + 1) < 10 ? \"0\" + (detailDate[i]._d.getMonth() + 1) : (detailDate[i]._d.getMonth() + 1).toString()\n              let date = (detailDate[i]._d.getDate()) < 10 ? \"0\" + (detailDate[i]._d.getDate()) : detailDate[i]._d.getDate()\n\n              detailList.push({\n                \"content\": detailContent[i],\n                \"masterId\": res.data.id,\n                \"scheduleDate\": year + month + date,\n                \"title\": detailTitle[i]\n              })\n            })\n\n            Axios.post(\"/timeline/detail/save\", detailList)\n              .then(response => {\n                console.log(response);\n              })\n          }\n        })\n    }\n  }\n\n  const onChangeTitle = (e) => {\n    setTitle(e.target.value)\n  }\n\n  const onChangeDetailTitle= (e, i) => {\n    let detailTitleArr = [...detailTitle]\n\n    detailTitleArr[i] = e.target.value\n    setDetailTitle(detailTitleArr)\n  }\n\n  const onChangeDate = (date, dateString, i) => {\n    let detailDateArr = [...detailDate]\n    let detailDatestringArr = [...detailDateString]\n\n    detailDateArr[i] = date\n    detailDatestringArr[i] = dateString\n    setDetailDate(detailDateArr)\n    setDetailDateString(detailDatestringArr)\n  }\n\n  const onchangeDetailContent = (e, i) => {\n    let detailContentArr = [...detailContent]\n\n    detailContentArr[i] = e.target.value\n    setDetailContent(detailContentArr)\n  }\n\n  const onSelectCategory = (value) => {\n    setCategory(value)\n  }\n\n  const onSelectComplete = (value) => {\n    setComplete(value)\n  }\n\n  const onSelectOpen = (value) => {\n    setOpen(value)\n  }\n\n  const onAddDetailDiv = () => {\n    let countArr = countList.length === 0 ? [0] : [...countList]\n    let counter = countArr.slice(-1)[0]\n\n    // 타임라인 상세 영역 다 삭제해서 하나도 없을 때\n    if(countList.length === 0) {\n      setCountList(countArr)\n    // 타임라인 상세 영역 1개 이상일 때\n    } else {\n      counter += 1\n      countArr[countArr.length] = counter\n      setCountList(countArr)\n    }\n  }\n\n  const onDeleteDetailTitle = (i) => {\n    let titleArr = [...detailTitle]\n    titleArr.splice(i, 1)\n    setDetailTitle(titleArr)\n  }\n\n  const onDeleteDetailDate = (i) => {\n    let dateArr = [...detailDate]\n    let datestringArr = [...detailDateString]\n\n    dateArr.splice(i, 1)\n    datestringArr.splice(i, 1)\n    setDetailDate(dateArr)\n    setDetailDateString(datestringArr)\n  }\n\n  const onDeleteDetailContent = (i) => {\n    let contentArr = [...detailContent]\n    contentArr.splice(i, 1)\n    setDetailContent(contentArr)\n  }\n\n  const onDeleteDetail = (item, i) => {\n    let countArr = [...countList]\n    // array 값과 일치하는 것만 삭제, 일치하지 않는 것들만 남김\n    const newCountArr = countArr.filter((arr) => arr !== item)\n    setCountList(newCountArr)\n    onDeleteDetailTitle(i)\n    onDeleteDetailDate(i)\n    onDeleteDetailContent(i)\n  }\n\n  return (\n    <CreateTimelineDiv>\n      <h1>타임라인 생성하기</h1>\n      <br />\n      <Form onSubmit={onCreateTimeline}>\n        <Form.Item\n          label=\"타임라인 제목\"\n          name=\"title\"\n        >\n          <Input\n            type=\"text\"\n            onChange={onChangeTitle}\n            value={title}\n            required\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"분야\"\n        >\n          <Select defaultValue=\"경제\" onChange={onSelectCategory}>\n            <Option value=\"경제\">경제</Option>\n            <Option value=\"사회\">사회</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item\n          label=\"진행 여부\"\n        >\n          <Select defaultValue=\"false\" onChange={onSelectComplete}>\n            <Option value=\"false\">진행중</Option>\n            <Option value=\"true\">진행완료</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item\n          label=\"공개 여부\"\n        >\n          <Select defaultValue=\"false\" onChange={onSelectOpen}>\n            <Option value=\"false\">비공개</Option>\n            <Option value=\"true\">공개</Option>\n          </Select>\n        </Form.Item>\n        <TimelineDetail countList={countList} onDeleteDetail={onDeleteDetail} onChangeDetailTitle={onChangeDetailTitle} detailTitle={detailTitle}\n          onChangeDate={onChangeDate} detailDate={detailDate} onchangeDetailContent={onchangeDetailContent} detailContent={detailContent} />\n        <Button onClick={onAddDetailDiv}>\n          <PlusCircleOutlined />추가\n        </Button>\n        <Divider />\n        <TimelineView countList={countList} detailTitle={detailTitle} detailDateString={detailDateString} detailContent={detailContent}/>\n        <Divider />\n        <Button size=\"large\" onClick={onCreateTimeline}>생성하기</Button>\n      </Form>\n    </CreateTimelineDiv>\n  )\n}\nexport default CreateTimeline\n","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\TimelinePage\\TimelinePage.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_reducers\\user_reducer.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\MyPage\\Sections\\MenuBar.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\CreateTimeline\\Sections\\TimelineDetail.js",["98"],"import React from \"react\"\nimport { Form, Input, DatePicker, Divider, Button } from \"antd\"\nimport styled from \"styled-components\"\nimport { CloseSquareOutlined } from \"@ant-design/icons\"\n\nconst DetailDiv = styled.div`\n  div {\n    display: flex;\n    flex-direction: column;\n    div {\n      button {\n        display: flex;\n        justify-content: flex-end;\n        border: none;\n        outline: none;\n        color: #FF4B2B;\n        &:active: {\n          border: none;\n          outline: none;\n        }\n        &::after {\n          border: none;\n          outline: none;\n\n        }\n      }\n      margin-bottom: 20px;\n      .ant-picker {\n        height: 32px;\n        .ant-picker-input {\n          display: flex;\n          flex-direction: row;\n        }\n      }\n    }\n  }\n`\n\nconst { TextArea } = Input\n\nconst TimelineDetail = (props) => {\n\n  return (\n    <DetailDiv>\n      {props.countList && props.countList.map((item, i) => (\n        <div key={i}>\n          <Divider />\n          <div>\n            {item}\n            <Button onClick={() => props.onDeleteDetail(item, i)}>\n              <CloseSquareOutlined />\n            </Button>\n            <label>타임라인 상세 제목</label>\n            <Input\n              type=\"text\"\n              value={props.detailTitle[i]}\n              onChange={(e) => props.onChangeDetailTitle(e, i)}\n              required\n            />\n          </div>\n          <div>\n            <label>날짜</label>\n            <DatePicker\n              value={props.detailDate[i]}\n              onChange={(date, dateString) => props.onChangeDate(date, dateString, i)}\n            />\n          </div>\n          <div>\n            <label>내용</label>\n            <TextArea\n              autoSize={{ minRows: 6, maxRows: 6 }}\n              value={props.detailContent[i]}\n              onChange={(e) => props.onchangeDetailContent(e, i)}\n            />\n          </div>\n        </div>\n      ))}\n    </DetailDiv>\n  )\n}\n\nexport default TimelineDetail\n","C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\components\\CreateTimeline\\Sections\\TimelineView.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_actions\\types.js",[],"C:\\Users\\tlagy\\Desktop\\개발 공부\\프로젝트\\timeline\\frontend\\my-app\\src\\_actions\\user_actions.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":41,"column":10,"nodeType":"105","endLine":41,"endColumn":19,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":7,"column":10,"nodeType":"109","messageId":"110","endLine":7,"endColumn":21},{"ruleId":"107","severity":1,"message":"111","line":54,"column":19,"nodeType":"109","messageId":"110","endLine":54,"endColumn":28},{"ruleId":"107","severity":1,"message":"112","line":55,"column":10,"nodeType":"109","messageId":"110","endLine":55,"endColumn":17},{"ruleId":"107","severity":1,"message":"113","line":54,"column":22,"nodeType":"109","messageId":"110","endLine":54,"endColumn":35},{"ruleId":"107","severity":1,"message":"114","line":3,"column":39,"nodeType":"109","messageId":"110","endLine":3,"endColumn":49},{"ruleId":"107","severity":1,"message":"115","line":4,"column":10,"nodeType":"109","messageId":"110","endLine":4,"endColumn":14},{"ruleId":"107","severity":1,"message":"116","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'props.history', and 'setCookie'. Either include them or remove the dependency array.","ArrayExpression",["119"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'setCookie' is assigned a value but never used.","'cookies' is assigned a value but never used.","'setCheckValid' is assigned a value but never used.","'DatePicker' is defined but never used.","'Link' is defined but never used.","'Form' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [cookies, dispatch, props.history, setCookie]",{"range":"122","text":"123"},[1509,1518],"[cookies, dispatch, props.history, setCookie]"]