{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tlagy\\\\Desktop\\\\\\uAC1C\\uBC1C \\uACF5\\uBD80\\\\\\uD504\\uB85C\\uC81D\\uD2B8\\\\timeline\\\\frontend\\\\my-app\\\\src\\\\hoc\\\\auth.js\";\nimport React, { useEffect } from \"react\";\nimport { auth } from \"../_actions/user_actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useCookies } from \"react-cookie\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function authHoc(SpecificComponent, option, adminRoute = null) {\n  var _s = $RefreshSig$();\n\n  function AuthenticationCheck(props) {\n    _s();\n\n    const [cookies, setCookie, removeCookie] = useCookies([]);\n    let user = useSelector(state => state.user);\n    const dispatch = useDispatch();\n\n    const removeCookies = () => {\n      removeCookie(\"tl_e\");\n      removeCookie(\"tl_re\");\n      removeCookie(\"tl_exp\");\n      removeCookie(\"tl_token\");\n      window.location.reload();\n      props.history(\"/login\");\n    };\n\n    useEffect(() => {\n      if (cookies.tl_e && cookies.tl_token && cookies.tl_re && cookies.tl_exp) {\n        const date = new Date();\n        const expTime = parseInt(cookies.tl_exp);\n        const tokens = {\n          \"accessToken\": cookies.tl_token,\n          \"refreshToken\": cookies.tl_re\n        };\n        let over3h = expTime + 10800000;\n\n        if (date.getTime() > expTime) {\n          if (date.getTime() > over3h) {\n            removeCookies();\n          }\n\n          Axios.post(\"/auth/reissue\", tokens).then(res => {\n            setCookie(\"tl_token\", res.data.accessToken);\n            setCookie(\"tl_exp\", res.data.accessTokenExpiresIn);\n            setCookie(\"tl_re\", res.data.refreshToken);\n            window.location.reload();\n            props.history(\"/mypage\");\n          });\n        } // member 정보 가져오기 위해 header에 token 담아서 넘김\n\n\n        Axios.defaults.headers.common['Authorization'] = `Bearer ${cookies.tl_token}`;\n        dispatch(auth(cookies.tl_e)); // cookie에 token 관련 값 4개 중 하나라도 없으면 쿠키 삭제 후 login 페이지로 이동\n      } else {\n        if (option) {\n          removeCookies();\n        }\n      }\n    }, [cookies]);\n    return /*#__PURE__*/_jsxDEV(SpecificComponent, { ...props,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this);\n  }\n\n  _s(AuthenticationCheck, \"VlFc4v0i2fjVMMPWeBWZ5hV2p4U=\", false, function () {\n    return [useCookies, useSelector, useDispatch];\n  });\n\n  return AuthenticationCheck;\n}","map":{"version":3,"sources":["C:/Users/tlagy/Desktop/개발 공부/프로젝트/timeline/frontend/my-app/src/hoc/auth.js"],"names":["React","useEffect","auth","useSelector","useDispatch","useCookies","Axios","authHoc","SpecificComponent","option","adminRoute","AuthenticationCheck","props","cookies","setCookie","removeCookie","user","state","dispatch","removeCookies","window","location","reload","history","tl_e","tl_token","tl_re","tl_exp","date","Date","expTime","parseInt","tokens","over3h","getTime","post","then","res","data","accessToken","accessTokenExpiresIn","refreshToken","defaults","headers","common"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\"\nimport { auth } from \"../_actions/user_actions\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\n\nexport default function authHoc(SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n      const [cookies, setCookie, removeCookie] = useCookies([])\n      let user = useSelector(state => state.user)\n      const dispatch = useDispatch()\n\n      const removeCookies = () => {\n        removeCookie(\"tl_e\")\n        removeCookie(\"tl_re\")\n        removeCookie(\"tl_exp\")\n        removeCookie(\"tl_token\")\n        window.location.reload()\n        props.history(\"/login\")\n      }\n\n      useEffect(() => {\n        if(cookies.tl_e && cookies.tl_token && cookies.tl_re && cookies.tl_exp) {\n          const date = new Date()\n          const expTime = parseInt(cookies.tl_exp)\n\n          const tokens = {\n            \"accessToken\": cookies.tl_token,\n            \"refreshToken\": cookies.tl_re\n          }\n\n          let over3h = expTime + 10800000\n\n          if(date.getTime() > expTime) {\n\n            if(date.getTime() > over3h) {\n              removeCookies()\n            }\n\n            Axios.post(\"/auth/reissue\", tokens)\n              .then(res => {\n                setCookie(\"tl_token\", res.data.accessToken)\n                setCookie(\"tl_exp\", res.data.accessTokenExpiresIn)\n                setCookie(\"tl_re\", res.data.refreshToken)\n                window.location.reload()\n                props.history(\"/mypage\")\n              })\n            }\n\n          // member 정보 가져오기 위해 header에 token 담아서 넘김\n          Axios.defaults.headers.common['Authorization'] = `Bearer ${cookies.tl_token}`\n          dispatch(auth(cookies.tl_e))\n        // cookie에 token 관련 값 4개 중 하나라도 없으면 쿠키 삭제 후 login 페이지로 이동\n        } else {\n          if (option) {\n            removeCookies()\n          }\n        }\n      }, [cookies])\n\n      return (\n        <SpecificComponent {...props} user={user} />\n      )\n    }\n  return AuthenticationCheck\n}\n"]},"metadata":{},"sourceType":"module"}