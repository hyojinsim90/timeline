[{"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\index.js":"1","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\reportWebVitals.js":"2","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\App.js":"3","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_reducers\\index.js":"4","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\hoc\\auth.js":"5","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\MyPage.js":"6","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\NavBar\\NavBar.js":"7","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\MyInfo.js":"8","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\ManageTimeline\\TimelineList.js":"9","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\AuthPage\\SignupPage.js":"10","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\AuthPage\\LoginPage.js":"11","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\MyTimeline.js":"12","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\CreateTimeline.js":"13","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\AuthPage\\FindPwPage.js":"14","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\ManageTimeline\\TimelineItem.js":"15","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\TimelineSearch.js":"16","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Main\\Main.js":"17","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Detail.js":"18","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_reducers\\user_reducer.js":"19","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Main\\Sections\\ViewsTop.js":"20","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Main\\Sections\\LikesTop.js":"21","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\Sections\\AllTimeline.js":"22","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\MiddleDetail.js":"23","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\SideScroll.js":"24","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\BottomComment.js":"25","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\LikeToggle.js":"26","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\TopMaster.js":"27","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\Sections\\SearchButton.js":"28","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\Sections\\SearchWord.js":"29","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\ManageTimeline\\Sections\\ModifyTimeline.js":"30","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_actions\\types.js":"31","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\UploadImage.js":"32","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\TimelineDetail.js":"33","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\TimelineView.js":"34","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\TimelineMaster.js":"35","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\Sections\\SomeTimeline.js":"36","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\Sections\\MenuBar.js":"37","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\NavBar\\Sections\\WebNavBar.js":"38","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\NavBar\\Sections\\MobileNavBar.js":"39","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_actions\\user_actions.js":"40"},{"size":1145,"mtime":1624897226000,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1624897226000,"results":"43","hashOfConfig":"42"},{"size":2070,"mtime":1624897226000,"results":"44","hashOfConfig":"42"},{"size":152,"mtime":1624897226000,"results":"45","hashOfConfig":"42"},{"size":2512,"mtime":1624897226000,"results":"46","hashOfConfig":"42"},{"size":165,"mtime":1624897226000,"results":"47","hashOfConfig":"42"},{"size":1514,"mtime":1624897226000,"results":"48","hashOfConfig":"42"},{"size":4909,"mtime":1624897226000,"results":"49","hashOfConfig":"42"},{"size":3494,"mtime":1624897226000,"results":"50","hashOfConfig":"42"},{"size":4195,"mtime":1624897226000,"results":"51","hashOfConfig":"42"},{"size":3128,"mtime":1624897226000,"results":"52","hashOfConfig":"42"},{"size":2091,"mtime":1624897226000,"results":"53","hashOfConfig":"42"},{"size":8046,"mtime":1626278736835,"results":"54","hashOfConfig":"42"},{"size":1830,"mtime":1624897226000,"results":"55","hashOfConfig":"42"},{"size":1235,"mtime":1624897226000,"results":"56","hashOfConfig":"42"},{"size":847,"mtime":1624897226000,"results":"57","hashOfConfig":"42"},{"size":930,"mtime":1627216087104,"results":"58","hashOfConfig":"42"},{"size":8007,"mtime":1624897226000,"results":"59","hashOfConfig":"42"},{"size":292,"mtime":1624897226000,"results":"60","hashOfConfig":"42"},{"size":3625,"mtime":1627213648135,"results":"61","hashOfConfig":"42"},{"size":3574,"mtime":1624897226000,"results":"62","hashOfConfig":"42"},{"size":321,"mtime":1624897226000,"results":"63","hashOfConfig":"42"},{"size":1236,"mtime":1624897226000,"results":"64","hashOfConfig":"42"},{"size":552,"mtime":1624897226000,"results":"65","hashOfConfig":"42"},{"size":3203,"mtime":1624897226000,"results":"66","hashOfConfig":"42"},{"size":984,"mtime":1624897226000,"results":"67","hashOfConfig":"42"},{"size":2214,"mtime":1624897226000,"results":"68","hashOfConfig":"42"},{"size":2813,"mtime":1624897226000,"results":"69","hashOfConfig":"42"},{"size":559,"mtime":1624897226000,"results":"70","hashOfConfig":"42"},{"size":11767,"mtime":1626340630395,"results":"71","hashOfConfig":"42"},{"size":37,"mtime":1624897226000,"results":"72","hashOfConfig":"42"},{"size":744,"mtime":1624897226000,"results":"73","hashOfConfig":"42"},{"size":2098,"mtime":1624897226000,"results":"74","hashOfConfig":"42"},{"size":1129,"mtime":1624897226000,"results":"75","hashOfConfig":"42"},{"size":1786,"mtime":1624897226000,"results":"76","hashOfConfig":"42"},{"size":1279,"mtime":1624897226000,"results":"77","hashOfConfig":"42"},{"size":2011,"mtime":1624897226000,"results":"78","hashOfConfig":"42"},{"size":1730,"mtime":1624897226000,"results":"79","hashOfConfig":"42"},{"size":2346,"mtime":1624897226000,"results":"80","hashOfConfig":"42"},{"size":231,"mtime":1624897226000,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"7d6wsz",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"84"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\index.js",[],["180","181"],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\reportWebVitals.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\App.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_reducers\\index.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\hoc\\auth.js",["182"],"import React, { useEffect } from \"react\"\nimport { auth } from \"../_actions/user_actions\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\nimport { useHistory } from \"react-router-dom\"\n\nexport default function authHoc(SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n      const [cookies, setCookie, removeCookie] = useCookies([])\n      let user = useSelector(state => state.user)\n      const history = useHistory()\n      const dispatch = useDispatch()\n\n      const removeCookies = () => {\n        removeCookie(\"tl_e\")\n        removeCookie(\"tl_re\")\n        removeCookie(\"tl_exp\")\n        removeCookie(\"tl_token\")\n        window.location.reload()\n        history.push(\"/login\")\n      }\n\n      useEffect(() => {\n        if(cookies.tl_e && cookies.tl_token && cookies.tl_re && cookies.tl_exp) {\n          const date = new Date()\n          const expTime = parseInt(cookies.tl_exp)\n\n          const tokens = {\n            \"accessToken\": cookies.tl_token,\n            \"refreshToken\": cookies.tl_re\n          }\n\n          let over3h = expTime + 10800000\n\n          if(date.getTime() > expTime) {\n            // 로그인 후 3시간 이상 지났을 때는 cookie 삭제\n            if(date.getTime() > over3h) {\n              removeCookies()\n            }\n\n            Axios.post(\"/auth/reissue\", tokens)\n              .then(res => {\n                setCookie(\"tl_token\", res.data.accessToken)\n                setCookie(\"tl_exp\", res.data.accessTokenExpiresIn)\n                setCookie(\"tl_re\", res.data.refreshToken)\n                history.push(\"/mypage\")\n                window.location.reload()\n              })\n              .catch(err => {\n                removeCookies()\n              })\n            }\n\n          // member 정보 가져오기 위해 header에 token 담아서 넘김\n          Axios.defaults.headers.common['Authorization'] = `Bearer ${cookies.tl_token}`\n          dispatch(auth(cookies.tl_e))\n        // cookie에 token 관련 값 4개 중 하나라도 없으면 쿠키 삭제 후 login 페이지로 이동\n        } else {\n          if (option) {\n            removeCookie(\"tl_e\")\n            removeCookie(\"tl_re\")\n            removeCookie(\"tl_exp\")\n            removeCookie(\"tl_token\")\n            history.push(\"/login\")\n          }\n        }\n      }, [cookies])\n\n      return (\n        <SpecificComponent {...props} user={user} />\n      )\n    }\n  return AuthenticationCheck\n}\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\MyPage.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\NavBar\\NavBar.js",["183","184"],"import React, { useState, useEffect } from \"react\"\nimport { BrowserView, MobileView } from \"react-device-detect\"\nimport { useSelector } from \"react-redux\"\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\nimport WebNavBar from \"./Sections/WebNavBar\"\nimport MobileNavBar from \"./Sections/MobileNavBar\"\nimport { useHistory } from \"react-router-dom\"\n\nconst NavBar = (props) => {\n  const [cookies, setCookie, removeCookie] = useCookies([])\n  const [auth, setAuth] = useState(false)\n\n  const history = useHistory()\n\n  useEffect(() => {\n    if(cookies.tl_token !== undefined) {\n      setAuth(true)\n    }\n  }, [cookies])\n\n  const onLogout = () => {\n    if(auth && cookies.tl_e) {\n      Axios.get(`/auth/logout/${cookies.tl_e}`)\n        .then(res => {\n          removeCookie(\"tl_e\")\n          removeCookie(\"tl_re\")\n          removeCookie(\"tl_exp\")\n          removeCookie(\"tl_token\")\n          setAuth(false)\n          window.location.reload()\n          history.push(\"/login\")\n        })\n        .catch(err => {\n          removeCookie(\"tl_e\")\n          removeCookie(\"tl_re\")\n          removeCookie(\"tl_exp\")\n          removeCookie(\"tl_token\")\n          setAuth(false)\n          window.location.reload()\n          history.push(\"/\")\n        })\n    }\n  }\n\n  return(\n    <div>\n      <BrowserView>\n        <WebNavBar auth={auth} onLogout={onLogout} />\n      </BrowserView>\n      <MobileView>\n        <MobileNavBar auth={auth} onLogout={onLogout} />\n      </MobileView>\n    </div>\n  )\n}\n\nexport default NavBar;\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\MyInfo.js",["185"],"import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { Form, Input, Button } from \"antd\"\nimport { useSelector } from \"react-redux\"\nimport Axios from \"axios\"\nimport MenuBar from \"./Sections/MenuBar\"\n\nconst InfoDiv = styled.div`\n  padding: 3rem 0;\n  form {\n    width: 320px;\n    display: inline-block;\n    .ant-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      .ant-form-item-label {\n        text-align: center;\n      }\n    }\n    // 닉네임 영역\n    #nickname {\n      display: flex;\n    }\n    label {\n      margin-bottom: 1rem;\n    }\n    .ant-input-password {\n      height: 32px;\n      input {\n        height: 100%;\n      }\n    }\n    .ant-form-item:last-child {\n      button {\n        width: 100%;\n        background: black;\n        color: #ffffff;\n        margin-top: 1rem;\n      }\n    }\n  }\n`\n\n\nconst MyInfo = () => {\n\n  const [email, setEmail] = useState(\"\")\n  const [nickname, setNickname] = useState([])\n  const [password1, setPassword1] = useState(\"\")\n  const [password2, setPassword2] = useState(\"\")\n  const [existingPw, setExistingPw] = useState(\"\")\n  const [checkDuplicate, setCheckDuplicate] = useState(false)\n  const [checkValid, setCheckValid] = useState(true)\n\n  const user = useSelector(state => state.user.userData)\n\n  useEffect(() => {\n    if(user !== undefined) {\n      setEmail(user.email)\n      setNickname(user.nickname)\n\n      Axios.get(`/member/${user.email}`)\n        .then(res => {\n          setExistingPw(res.data.password)\n        })\n    }\n  }, [user])\n\n  const onChangeNick = (e) => {\n    setNickname(e.target.value)\n    setCheckDuplicate(false)\n  }\n\n  const onChangePwd1 = (e) => {\n    setPassword1(e.target.value)\n  }\n\n  const onChangePwd2 = (e) => {\n    setPassword2(e.target.value)\n  }\n\n  // 중복확인 체크\n  const onCheckDup = () => {\n    Axios.get(\"/member/ids\")\n      .then(res => {\n        const duplicate = res.data.filter(item => item.nickname === nickname)\n        // 닉네임 중복일 경우\n        if(duplicate.length > 0) {\n          // 다른 사람 닉네임과 중복일 경우\n          if(nickname !== user.nickname) {\n            setCheckDuplicate(false)\n            alert(\"이미 사용 중인 닉네임입니다\")\n          // 내 기존 닉네임일 경우\n          } else {\n            setCheckDuplicate(true)\n            alert(\"사용할 수 있는 닉네임입니다\")\n          }\n        } else {\n          setCheckDuplicate(true)\n          alert(\"사용할 수 있는 닉네임입니다\")\n        }\n      })\n  }\n\n  const onChangeInfo = () => {\n\n    // 닉네임 중복확인 버튼 클릭하도록 하기\n    if(checkDuplicate === false) {\n      alert(\"닉네임 중복확인을 해주세요\")\n      return false\n    } else if(password1 || password2) {\n      if(password1 !== password2) {\n        alert(\"비밀번호와 비밀번호 확인이 일치하지 않습니다\")\n        return false\n      }\n    }\n\n    const variables = {\n      \"nickname\": nickname,\n      \"password\": password1 ? password1 : existingPw\n    }\n\n    if(checkDuplicate && checkValid) {\n      Axios.put(`/member/${email}`, variables)\n        .then(res => {\n          // 닉네임, 비밀번호 변경 성공 시 페이지 새로고침\n          if(res.status === 200) {\n            window.location.reload()\n          }\n        })\n    }\n  }\n\n  return (\n    <div>\n      <MenuBar />\n      <InfoDiv>\n        <Form>\n          <Form.Item\n            label=\"이메일:\"\n            name=\"email\"\n            rules={[{ required: true }]}\n          >\n            <div>\n              { email &&\n                <Input value={email} disabled />\n              }\n            </div>\n          </Form.Item>\n          <Form.Item\n            label=\"닉네임:\"\n            name=\"nickname\"\n            rules={[{ required: true }]}\n          >\n            <div>\n              <Input value={nickname} onChange={onChangeNick} />\n              <Button onClick={onCheckDup}>중복확인</Button>\n            </div>\n          </Form.Item>\n          <Form.Item\n            label=\"비밀번호(8~16자):\"\n            name=\"password1\"\n            rules={[{ required: true, min: 8, max: 16, message: '다시 입력해 주세요' }]}\n          >\n            <Input.Password value={password1} onChange={onChangePwd1} />\n          </Form.Item>\n          <Form.Item\n            label=\"비밀번호 확인(8~16자):\"\n            name=\"password2\"\n            rules={[{ required: true, min: 8, max: 16, message: '다시 입력해 주세요' }]}\n          >\n            <Input.Password value={password2} onChange={onChangePwd2} />\n          </Form.Item>\n          <Form.Item\n            name=\"button\"\n          >\n            <Button size=\"large\" onClick={onChangeInfo}>\n              수정하기\n            </Button>\n          </Form.Item>\n        </Form>\n      </InfoDiv>\n    </div>\n  )\n}\n\nexport default MyInfo\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\ManageTimeline\\TimelineList.js",["186","187","188"],"import React, { useState, useEffect } from \"react\"\nimport { Table, Tag } from \"antd\"\nimport styled from \"styled-components\"\nimport Axios from \"axios\"\nimport { useSelector } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\nconst TimelineListDiv = styled.div`\n  padding: 3rem 2rem;\n  td {\n    div {\n      div {\n        width: 100PX;\n        height: 100PX;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      img {\n        width: 100px;\n        height: 100px;\n      }\n    }\n    .ant-empty {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n  }\n`\n\nconst TimelineList = (props) => {\n  const [list, setList] = useState([])\n  const [checkDelete, setCheckDelete] = useState(false)\n\n  const columns = [\n    {\n      title: '이미지',\n      dataIndex: 'imgFullPath',\n      key: 'imgFullPath',\n      render: imgFullPath => (\n        <div>\n          { imgFullPath ?\n            <img src={imgFullPath} />\n          :\n            <div>\n              NO IMAGE\n            </div>\n          }\n        </div>\n      )\n    },\n    {\n      title: '제목',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: '분야',\n      dataIndex: 'category',\n      key: 'category',\n    },\n    {\n      title: '진행여부',\n      dataIndex: 'complete',\n      key: 'complete',\n      render: complete => (\n        <div>\n          { complete ?\n            <Tag color=\"mediumpurple\">진행완료</Tag>\n            :\n            <Tag color=\"skyblue\">진행중</Tag>\n          }\n        </div>\n      ),\n    },\n    {\n      title: '공개여부',\n      dataIndex: 'open',\n      key: 'open',\n      render: open => (\n        <div>\n          { open ?\n            <Tag color=\"black\">공개</Tag>\n            :\n            <Tag color=\"lightgray\">비공개</Tag>\n          }\n        </div>\n      )\n    },\n    {\n      title: '조회수',\n      dataIndex: 'viewCount',\n      key: 'viewCount',\n    },\n    {\n      title: '추천수',\n      dataIndex: 'likeCount',\n      key: 'likeCount',\n    },\n    {\n      title: '생성일자',\n      dataIndex: 'createdDate',\n      key: 'createdDate',\n      render: date => (\n        <div>\n          {date.substring(0, 10)}\n        </div>\n      )\n    },\n    {\n      title: '삭제',\n      dataIndex: 'id',\n      key: 'id',\n      render: (id) => (\n        <div>\n          <DeleteOutlined onClick={(e) => onDeleteTimeline(e, id)} />\n        </div>\n      )\n    },\n ]\n\n  useEffect(() => {\n    if(props.user.userData !== undefined && props.user.userData.email !== undefined) {\n      Axios.get(`/timeline/master/${props.user.userData.email}`)\n        .then(res => {\n          if(res.data) {\n            setList(res.data)\n          }\n        })\n    }\n  }, [props.user, checkDelete])\n\n  const onDeleteTimeline = (e, id) => {\n    // onRow click event 실행 막기\n    e.stopPropagation()\n\n    Axios.delete(`/timeline/${id}`)\n      .then(res => {\n        if(res.status === 200) {\n          alert(\"삭제되었습니다\")\n          setCheckDelete(!checkDelete)\n        }\n      })\n  }\n\n  return (\n    <TimelineListDiv>\n      <Table columns={columns} dataSource={list} rowKey={list => list.id} pagination={false}\n        onRow={(record, rowIndex) => {\n        return {\n          onClick: () => {\n            props.history.push(`/timelinelist/${record.id}`)\n          },\n        }\n      }}\n      />\n    </TimelineListDiv>\n  )\n}\n\nexport default TimelineList\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\AuthPage\\SignupPage.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\AuthPage\\LoginPage.js",["189"],"import React, { useState } from \"react\"\nimport { Form, Input, Button } from \"antd\"\nimport styled from \"styled-components\"\nimport { useHistory } from \"react-router-dom\"\nimport { useCookies } from \"react-cookie\"\nimport Axios from \"axios\"\nimport { Link } from \"react-router-dom\"\n\nconst LoginDiv = styled.div`\n  padding: 3rem 0;\n  form {\n    width: 320px;\n    display: inline-block;\n    .ant-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      .ant-form-item-label {\n        text-align: center;\n      }\n    }\n    // 비밀번호 찾기 영역\n    .ant-form-item:nth-child(2) {\n      margin-bottom: 0;\n      & + .ant-form-item .ant-col {\n        text-align: right;\n        #search {\n          color: lightgray !important;\n        }\n      }\n    }\n    label {\n      margin-bottom: 1rem;\n    }\n    .ant-input-password {\n      height: 32px;\n      input {\n        height: 100%;\n      }\n    }\n    button {\n      width: 100%;\n      background: black;\n      color: #ffffff;\n      margin-top: 1rem;\n    }\n  }\n`;\n\nconst LoginPage = () => {\n\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState(\"\")\n  const [cookies, setCookie] = useCookies(\"\")\n\n  const history = useHistory()\n\n  const onChangeEmail = (e) => {\n    setEmail(e.target.value)\n  }\n\n  const onChangePwd = (e) => {\n    setPassword(e.target.value)\n  }\n\n  const onCheckEnter = (e) => {\n    if(e.key === \"Enter\") {\n      onLogin()\n    }\n  }\n\n  const onLogin = () => {\n\n    var variables = {\n      \"email\": email,\n      \"password\": password\n    }\n\n    Axios.post(\"/auth/login\", variables)\n      .then(res => {\n        setCookie(\"tl_token\", res.data.accessToken)\n        setCookie(\"tl_exp\", res.data.accessTokenExpiresIn)\n        setCookie(\"tl_e\", email)\n        setCookie(\"tl_re\", res.data.refreshToken)\n        history.push(\"/mypage\")\n        window.location.reload()\n      })\n      .catch(err => {\n        setErrorMessage(\"이메일이나 비밀번호를 다시 확인해 주세요\")\n      })\n  }\n\n  return (\n    <LoginDiv>\n      <h1>로그인</h1>\n      <br />\n      <Form onKeyPress={onCheckEnter}>\n        <Form.Item\n          label=\"이메일 주소:\"\n          name=\"email\"\n          rules={[{ required: true }]}\n        >\n          <Input value={email} onChange={onChangeEmail} />\n        </Form.Item>\n        <Form.Item\n          label=\"비밀번호:\"\n          name=\"password\"\n          rules={[{ required: true }]}\n        >\n          <Input.Password value={password} onChange={onChangePwd} />\n        </Form.Item>\n        <Form.Item name=\"search\">\n          <Link to=\"/findpw\">\n            비밀번호 찾기\n          </Link>\n        </Form.Item>\n        {errorMessage && (\n          <label><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{errorMessage}</p></label>\n        )}\n        <Form.Item>\n          <Button size=\"large\" onClick={onLogin}>\n            로그인\n          </Button>\n        </Form.Item>\n      </Form>\n    </LoginDiv>\n  )\n}\n\nexport default LoginPage;\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\MyTimeline.js",["190"],"import React, { useState, useEffect } from \"react\"\nimport MenuBar from \"./Sections/MenuBar\"\nimport { Row, Col, Card, Button } from \"antd\"\nimport styled from \"styled-components\"\nimport SomeTimeline from \"./Sections/SomeTimeline\"\nimport { useSelector } from \"react-redux\"\nimport Axios from \"axios\"\n\nconst TimelineDiv = styled.div`\n  padding: 3rem 2rem;\n  .ant-card {\n    text-align: left;\n    margin-bottom: 3rem;\n    font-size: 17px;\n    .ant-card-head-title {\n      font-weight: bold;\n      font-size: 17px;\n    }\n  }\n`\n\nconst MyTimeline = (props) => {\n  const [allList, setAllList] = useState([])\n  const [list, setList] = useState([])\n\n  useEffect(() => {\n\n    if(props.user.userData !== undefined && props.user.userData.email !== undefined) {\n      Axios.get(`/timeline/master/${props.user.userData.email}`)\n        .then(res => {\n          if(res.data) {\n            const latestData = res.data.slice(-3)\n            setAllList(res.data)\n            setList(latestData)\n          }\n        })\n    }\n  }, [props.user])\n\n  const onMoveToCreate = () => {\n    // 타임라인 최대 저장 개수 20개로 제한 => 20개 초과하면 페이지 접근 x\n    if(allList.length > 19) {\n      alert(\"타임라인은 최대 20개까지 작성할 수 있습니다\")\n    } else {\n      props.history.push(\"/createtimeline\")\n    }\n  }\n\n  return (\n    <div>\n      <MenuBar />\n      <TimelineDiv>\n        <Row gutter={16}>\n          <Col span={24}>\n            <Card title=\"내 타임라인\" bordered={false} extra={<Button size=\"large\" onClick={onMoveToCreate}>생성하기</Button>}>\n              <SomeTimeline list={list} />\n            </Card>\n          </Col>\n          <Col span={24}>\n            <Card title=\"관심 타임라인\" bordered={false}>\n              관심 타임라인이 없습니다\n            </Card>\n          </Col>\n          <Col span={24}>\n            <Card title=\"추천 타임라인\" bordered={false}>\n              추천 타임라인이 없습니다\n            </Card>\n          </Col>\n        </Row>\n      </TimelineDiv>\n    </div>\n  )\n}\n\nexport default MyTimeline\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\CreateTimeline.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\AuthPage\\FindPwPage.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\ManageTimeline\\TimelineItem.js",["191"],"import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport ModifyTimeline from \"./Sections/ModifyTimeline\"\nimport Axios from \"axios\"\nimport { useParams } from \"react-router-dom\"\n\nconst TimelineItemDiv = styled.div`\n  padding: 3rem 2rem;\n`\n\nconst TimelineItem = (props) => {\n  const [timeline, setTimeline] = useState([])\n  const [detail, setDetail] = useState([])\n\n  const params = useParams()\n\n  useEffect(() => {\n    if(props.user.userData !== undefined && props.user.userData.email !== undefined) {\n      Axios.get(`/timeline/master/${props.user.userData.email}`)\n        .then(res => {\n          if(res.data) {\n            const list = res.data.filter(item => item.id.toString() === params.timelineId)\n            setTimeline(list)\n\n            Axios.get(`/timeline/detail/${list[0].id}`)\n              .then(response => {\n                if(response.data) {\n                  setDetail(response.data)\n                }\n              })\n          }\n        })\n    }\n  }, [props.user])\n\n  return (\n    <TimelineItemDiv>\n      <ModifyTimeline timeline={timeline} detail={detail} timelineId={params.timelineId} history={props.history} />\n    </TimelineItemDiv>\n  )\n}\n\nexport default TimelineItem\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\TimelineSearch.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Main\\Main.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Detail.js",["192","193","194"],"import React, { useState, useEffect } from \"react\"\nimport TopMaster from \"./Sections/TopMaster\"\nimport MiddleDetail from \"./Sections/MiddleDetail\"\nimport BottomComment from \"./Sections/BottomComment\"\nimport SideScroll from \"./Sections/SideScroll\"\nimport LikeToggle from \"./Sections/LikeToggle\"\nimport styled from \"styled-components\"\nimport { useParams } from \"react-router-dom\"\nimport Axios from \"axios\"\n\nconst DetailDiv = styled.div`\n  margin: 3rem 5rem;\n`\n\nconst MiddleDiv = styled.div`\n  width: 100%;\n  display: flex;\n`\n\nconst Detail = (props) => {\n  const [masterData, setMasterData] = useState([])\n  const [nickname, setNickname] = useState(\"\")\n  const [countList, setCountList] = useState([])\n  const [detailDateString, setDetailDateString] = useState([])\n  const [title, setTitle] = useState([])\n  const [content, setContent] = useState([])\n  const [id, setId] = useState([])\n  const [loginStatus, setLoginStatus] = useState(false)\n  const [comment, setComment] = useState([])\n  const [toggle, setToggle] = useState(false)\n  const [likeCount, setLikeCount] = useState(0)\n  const [star, setStar] = useState(\"\")\n  const [commentContent, setCommentContent] = useState(\"\")\n  const [modifyStatus, setModifyStatus] = useState(false)\n  const [hideInput, setHideInput] = useState(false)\n  const [modifyIndex, setModifyIndex] = useState(0)\n\n  const param = useParams()\n\n  useEffect(() => {\n    let detailDatestringArr = [...detailDateString]\n    let titleArr = [...title]\n    let contentArr = [...content]\n    let idArr = [...id]\n    let refineDate = []\n\n    // timeline master 가져오기\n    Axios.get(`/timeline/master/list`)\n      .then(res => {\n        if(res.data) {\n          const data = res.data.filter(item => item.id.toString() === param.timelineId)\n          setMasterData(data[0])\n          Axios.get(`/auth/nicknames/${data[0].author}`)\n            .then(res => {\n              setNickname(res.data.nickname)\n            })\n        }\n      })\n\n    // timeline detail 가져오기\n    Axios.get(`/timeline/detail/${param.timelineId}`)\n      .then(res => {\n        if(res.data) {\n          setCountList(Object.keys(res.data))\n          setDetailDateString(res.data.scheduleDate)\n          res.data.forEach((item, i) => {\n            refineDate[i] = item.scheduleDate\n            titleArr[i] = item.title\n            contentArr[i] = item.content\n            idArr[i] = item.id.toString()\n          })\n\n          // scheduleDate에 - 문자열 붙이기\n          refineDate.forEach((item, i) => {\n            detailDatestringArr[i] = item.substring(0, 4) + \"-\" + item.substring(4, 6) + \"-\" + item.substring(6, 8)\n          })\n\n          setDetailDateString(detailDatestringArr)\n          setTitle(titleArr)\n          setContent(contentArr)\n          setId(idArr)\n        }\n      })\n\n      // comment 리스트 가져오기\n      Axios.get(\"/timeline/comment/list\")\n        .then(res => {\n          const data = res.data.filter(item => item.masterId.toString() === param.timelineId)\n          setComment(data)\n        })\n  }, [])\n\n  useEffect(() => {\n    if(props.user.userData !== undefined) {\n      setLoginStatus(true)\n\n      // 렌더링 되자 마자 likeCount 가져오기\n      Axios.get(\"/timeline/like/list\")\n        .then(res => {\n          const data = res.data.filter(item => item.masterId.toString() === param.timelineId)\n          setLikeCount(data.length)\n          Axios.get(`/auth/getId/${props.user.userData.email}`)\n            .then(userRes => {\n              if(userRes.data) {\n                const checkMyLikes = data.filter(item => item.memberId === userRes.data)\n                // 현재 유저가 like 추천한 글인지 체크 후 아이콘(empty, full) 세팅\n                if(checkMyLikes.length !== 0) {\n                  setToggle(true)\n                }\n              }\n            })\n        })\n\n      // 댓글 작성했는지 안 했는지 상태값 넣어서 comment input 영역 숨기거나 보여주기\n      const check = comment.filter(item => item.nickname === props.user.userData.nickname)\n      if(check.length !== 0) {\n        setHideInput(true)\n      }\n    }\n  }, [props.user])\n\n  const onChangeStar = (value) => {\n    setStar(value)\n  }\n\n  const onChangeCommentContent = (e) => {\n    setCommentContent(e.target.value)\n  }\n\n  const onToggleLike = () => {\n    // 로그인한 상태이고 email 값 있을 때\n    if(props.user.userData.email) {\n      Axios.get(`/auth/getId/${props.user.userData.email}`)\n        .then(res => {\n          if(res.data) {\n            const variables = {\n              masterId: parseInt(param.timelineId),\n              memberId: res.data\n            }\n\n            // 추천한 상태에서 추천 취소할 때 Icon full->empty\n            if(toggle) {\n              Axios.post(\"/timeline/like/change\", variables)\n                .then(res => {\n                  if(res.data) {\n                    setLikeCount(res.data.likeCount)\n                    setToggle(false)\n                  }\n                })\n              // Axios.post(\"/timeline/like/change\", variables)\n            // 추천 안 한 상태에서 추천할 때 Icon emtpy->full\n            } else {\n              Axios.post(\"/timeline/like/change\", variables)\n                .then(res => {\n                  if(res.data) {\n                    setLikeCount(res.data.likeCount)\n                    setToggle(true)\n                  }\n                })\n            }\n\n          }\n        })\n    }\n  }\n\n  const onSaveComment = () => {\n    if(props.user.userData === undefined) {\n      alert(\"로그인 후 작성 가능합니다\")\n    } else {\n      const variables = {\n        content: commentContent,\n        masterId: parseInt(param.timelineId),\n        nickname: props.user !== undefined ? props.user.userData.nickname : \"\",\n        star: star\n      }\n\n      // 댓글 내용 유효성 체크\n      if(!commentContent || !param.timelineId || !star) {\n        alert(\"내용을 입력해 주세요\")\n        return false\n      }\n\n      Axios.post(\"/timeline/comment\", variables)\n        .then(res => {\n          if(res.status === 200) {\n            alert(\"댓글 작성을 완료했습니다\")\n            // 댓글 저장하고 나서 다시 댓글 불러오기\n            Axios.get(\"/timeline/comment/list\")\n              .then(res => {\n                const data = res.data.filter(item => item.masterId.toString() === param.timelineId)\n                setComment(data)\n                // 작성한 댓글이 있을 경우 새 댓글 입력하기 위한 영역 숨기기\n                setHideInput(true)\n              })\n          }\n        })\n    }\n  }\n\n  const onDelete = (commentContent, id, nickname, star) => {\n    let variables = {\n      content: commentContent,\n      masterId: id,\n      nickname: nickname,\n      star: star\n    }\n\n    //\n    // Axios.delete(\"/timeline/comment\", variables)\n    //   .then(res => {\n    //     console.log(res);\n    //   })\n  }\n\n  const onModify = (i, stars, contents) => {\n    // 수정 버튼 클릭하면 comment 영역 변경\n    setModifyStatus(true)\n    setModifyIndex(i)\n    setStar(stars)\n    setCommentContent(contents)\n  }\n\n  return (\n    <DetailDiv>\n      <TopMaster masterData={masterData} nickname={nickname} />\n      <MiddleDiv>\n        <MiddleDetail countList={countList} detailDateString={detailDateString} title={title} content={content} id={id} />\n        <SideScroll countList={countList} id={id} />\n      </MiddleDiv>\n      { /* 로그인 시에만 추천 버튼 노출 */ }\n      { loginStatus &&\n        <LikeToggle toggle={toggle} onToggleLike={onToggleLike} likeCount={likeCount} />\n      }\n      <BottomComment comment={comment} user={props.user.userData} onSaveComment={onSaveComment} onChangeCommentContent={onChangeCommentContent} onChangeStar={onChangeStar}\n        onDelete={onDelete} onModify={onModify} hideInput={hideInput} modifyStatus={modifyStatus} modifyIndex={modifyIndex} star={star} commentContent={commentContent} />\n    </DetailDiv>\n  )\n}\n\nexport default Detail\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_reducers\\user_reducer.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Main\\Sections\\ViewsTop.js",["195","196"],"import React, { useState } from \"react\"\nimport { Card, Tag } from \"antd\"\nimport styled from \"styled-components\"\nimport { Swiper, SwiperSlide } from \"swiper/react\"\nimport \"swiper/swiper.min.css\";\nimport \"swiper/components/pagination/pagination.min.css\"\nimport \"swiper/components/navigation/navigation.min.css\"\nimport SwiperCore, { Pagination,Navigation } from \"swiper/core\"\nimport { EyeOutlined, LikeOutlined } from \"@ant-design/icons\"\nimport { Link } from \"react-router-dom\"\n\nconst ViewsTopDiv = styled.div`\n  margin: 0px 40px;\n  h2 {\n    text-align: left;\n    margin-bottom: 0;\n  }\n  .swiper-container {\n    height: 100%;\n    .swiper-wrapper {\n      .ant-tag:first-child {\n        position: absolute;\n        top: 5px;\n        left: 5px;\n      }\n      .ant-tag:nth-child(2) {\n        position: absolute;\n\n      }\n      margin-top: 55px;\n      .ant-card-meta-title {\n        text-align: left;\n      }\n    }\n    .ant-card-cover img {\n      width: 100%;\n      height: 150px;\n    }\n    .swiper-button-next {\n      top: 10%;\n    }\n    .swiper-button-prev {\n      top: 10%;\n      position: absolute;\n      left: 94%;\n    }\n    .swiper-button-next:after, .swiper-button-prev:after {\n      font-size: 15px;\n      font-weight: bold;\n    }\n    .ant-card-meta + div {\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n      margin-top: 20px;\n      div {\n        display: flex;\n        align-items: center;\n        margin-right: 3px;\n        span {\n          margin-right: 2px;\n          font-size: 15px;\n        }\n      }\n      & + .ant-tag {\n        width: 60px;\n        height: 60px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 50%;\n        position: absolute;\n        top: 120px;\n        right: 0;\n      }\n    }\n  }\n`\n\nSwiperCore.use([Pagination,Navigation])\n\nconst { Meta } = Card\n\nconst ViewsTop = (props) => {\n  const [swiperRef, setSwiperRef] = useState(\"\")\n  return (\n    <ViewsTopDiv>\n    <h2>오늘의 추천 TOP 10</h2>\n      <Swiper\n        slidesPerView={5}\n        centeredSlides={false}\n        spaceBetween={15}\n        navigation={{nextEl: '.swiper-button-next', prevEl: '.swiper-button-prev'}}\n      >\n      <div className=\"swiper-button-prev swiper-button-black\"></div>\n      <div className=\"swiper-button-next swiper-button-black\"></div>\n      {props.viewsList && props.viewsList.map((item, i) => (\n        <SwiperSlide key={i}>\n          <Link to={`/timeline/${item.id}`}>\n            <Card\n              style={{ width: '100%' }}\n              cover={\n                <img\n                  alt=\"img\"\n                  src={`/timeline/master/image/${item.id}`}\n                />\n              }\n            >\n              <Tag color=\"black\">{props.viewsList[i].category}</Tag>\n              <Meta\n                title={props.viewsList[i].title}\n              />\n\n              <div>\n                <div>\n                  <EyeOutlined />\n                  <span>{props.viewsList[i].viewCount}</span>\n                </div>\n                <div>\n                  <LikeOutlined />\n                  <span>{props.viewsList[i].likeCount}</span>\n                </div>\n              </div>\n              {props.viewsList[i].complete ?\n                <Tag color=\"mediumpurple\">\n                  <span>진행완료</span>\n                </Tag>\n                :\n                <Tag color=\"skyblue\">\n                  <span>진행중</span>\n                </Tag>\n              }\n            </Card>\n          </Link>\n        </SwiperSlide>\n      ))}\n      </Swiper>\n    </ViewsTopDiv>\n  )\n}\n\nexport default ViewsTop\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Main\\Sections\\LikesTop.js",["197"],"import React, { useState } from \"react\"\nimport { Card, Tag } from \"antd\"\nimport styled from \"styled-components\"\nimport { Swiper, SwiperSlide } from \"swiper/react\"\nimport \"swiper/swiper.min.css\"\nimport \"swiper/components/pagination/pagination.min.css\"\nimport \"swiper/components/navigation/navigation.min.css\"\nimport SwiperCore, { Pagination, Navigation } from \"swiper/core\"\nimport { EyeOutlined, LikeOutlined } from \"@ant-design/icons\"\nimport { Link } from \"react-router-dom\"\n\nconst LikesTopDiv = styled.div`\n  margin: 0px 40px;\n  h2 {\n    text-align: left;\n    margin-bottom: 0;\n  }\n  .swiper-container {\n    height: 100%;\n    .swiper-wrapper {\n      .ant-tag:first-child {\n        position: absolute;\n        top: 5px;\n        left: 5px;\n      }\n      .ant-tag:nth-child(2) {\n        position: absolute;\n\n      }\n      margin-top: 55px;\n      .ant-card-meta-title {\n        text-align: left;\n      }\n    }\n    .ant-card-cover img {\n      width: 100%;\n      height: 150px;\n    }\n    .swiper-button-next {\n      top: 10%;\n    }\n    .swiper-button-prev {\n      top: 10%;\n      position: absolute;\n      left: 94%;\n    }\n    .swiper-button-next:after, .swiper-button-prev:after {\n      font-size: 15px;\n      font-weight: bold;\n    }\n    .ant-card-meta + div {\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n      margin-top: 20px;\n      div {\n        display: flex;\n        align-items: center;\n        margin-right: 3px;\n        span {\n          margin-right: 2px;\n          font-size: 15px;\n        }\n      }\n      & + .ant-tag {\n        width: 60px;\n        height: 60px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border-radius: 50%;\n        position: absolute;\n        top: 120px;\n        right: 0;\n      }\n    }\n  }\n`\n\nSwiperCore.use([Pagination,Navigation])\n\nconst { Meta } = Card\n\nconst LikesTop = (props) => {\n  return (\n    <LikesTopDiv>\n    <h2>추천 타임라인 TOP 10</h2>\n      <Swiper\n        slidesPerView={5}\n        centeredSlides={false}\n        spaceBetween={15}\n        navigation={{nextEl: '.swiper-button-next', prevEl: '.swiper-button-prev'}}\n      >\n      <div className=\"swiper-button-prev swiper-button-black\"></div>\n      <div className=\"swiper-button-next swiper-button-black\"></div>\n      {props.likesList && props.likesList.map((item, i) => (\n        <SwiperSlide key={i}>\n          <Link to={`/timeline/${item.id}`}>\n            <Card\n              style={{ width: '100%' }}\n              cover={\n                <img\n                  alt=\"img\"\n                  src={props.likesList[i].imgFullPath}\n                />\n              }\n            >\n              <Tag color=\"black\">{props.likesList[i].category}</Tag>\n              <Meta\n                title={props.likesList[i].title}\n              />\n\n              <div>\n                <div>\n                  <EyeOutlined />\n                  <span>{props.likesList[i].viewCount}</span>\n                </div>\n                <div>\n                  <LikeOutlined />\n                  <span>{props.likesList[i].likeCount}</span>\n                </div>\n              </div>\n              {props.likesList[i].complete ?\n                <Tag color=\"mediumpurple\">\n                  <span>진행완료</span>\n                </Tag>\n                :\n                <Tag color=\"skyblue\">\n                  <span>진행중</span>\n                </Tag>\n              }\n            </Card>\n          </Link>\n        </SwiperSlide>\n      ))}\n      </Swiper>\n    </LikesTopDiv>\n  )\n}\n\nexport default LikesTop\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\Sections\\AllTimeline.js",["198"],"import React from \"react\"\nimport { Pagination } from \"antd\"\nimport styled from \"styled-components\"\n\nconst AllTimeline = (props) => {\n  return (\n    <>\n      <Pagination\n        showSizeChanger={false}\n        total={200}\n        defaultCurrent={1}\n        pageSize={20}\n      />\n    </>\n  )\n}\n\nexport default AllTimeline\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\MiddleDetail.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\SideScroll.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\BottomComment.js",["199","200","201","202"],"import React, { useState } from \"react\"\nimport { Space, Comment, Tooltip, Rate, List, Input, Button, Divider } from \"antd\"\nimport moment from \"moment\"\nimport styled from \"styled-components\"\nimport Axios from \"axios\"\n\nconst BottomCommentDiv = styled.div`\n  z-index: 10;\n  position: relative;\n  background: white;\n  .ant-space {\n    display: flex;\n    margin-bottom: 18px;\n    h3 {\n      margin-bottom: 0;\n    }\n    & + div {\n      display: flex;\n      button {\n        height: 98px;\n        margin-left: 16px;\n      }\n    }\n  }\n  .ant-comment {\n    button {\n      border: none;\n    }\n    button:hover, button:focus, button:active, button::after {\n      outline: none;\n      border: none;\n      box-shadow: none !important;\n      color: black;\n    }\n  }\n  .ant-comment-content-author {\n    display: flex;\n    align-items: center;\n    div {\n      ul {\n        margin-left: 10px;\n      }\n    }\n  }\n  .ant-comment-content-detail {\n    text-align: left;\n  }\n  .ant-comment-actions {\n    text-align: right;\n  }\n`\n\nconst { TextArea } = Input\n\nconst BottomComment = (props) => {\n  const [data, setData] = useState([])\n\n  return (\n    <BottomCommentDiv>\n      <Space>\n        <h3>댓글 ({props.comment.length})</h3>\n        { props.hideInput ?\n          <></>\n          :\n          <Rate onChange={props.onChangeStar} />\n        }\n      </Space>\n      { props.hideInput ?\n        <></>\n        :\n        <div>\n          <TextArea\n            autoSize={{ minRows: 4, maxRows: 4 }}\n            onChange={props.onChangeCommentContent}\n          />\n          <Button onClick={props.onSaveComment}>저장</Button>\n        </div>\n      }\n      <Divider />\n      <List\n        className=\"comment-list\"\n        itemLayout=\"horizontal\"\n        dataSource={props.comment}\n      >\n        {props.comment && props.comment.map((item, i) => (\n          <li key={i}>\n            <Comment\n              actions={props.user !== undefined && props.user.nickname === item.nickname\n                ?\n                [<Button onClick={() => props.onModify(i, item.star, item.content)}><span>수정</span></Button>, <Button onClick={() => props.onDelete(item.content, item.masterId, item.nickname, item.star)}><span>삭제</span></Button>]\n                : \"\"\n              }\n              author={item.nickname}\n              content={(\n              props.modifyStatus && i === props.modifyIndex ?\n                <TextArea\n                  autoSize={{ minRows: 4, maxRows: 4 }}\n                  onChange={props.onChangeCommentContent}\n                  value={props.modifyStatus && i === props.modifyIndex ? props.commentContent : item.content}\n                />\n                :\n                <p>{item.content}</p>\n              )}\n              datetime={(\n              <div>\n                <span>{moment().format('YYYY-MM-DD')}</span>\n                <Rate value={props.modifyStatus && i === props.modifyIndex ? props.star : item.star} disabled={props.modifyStatus && i === props.modifyIndex ? false : true} onChange={props.onChangeStar}/>\n              </div>\n              )}\n            />\n            <Divider />\n          </li>\n        ))}\n      </List>\n    </BottomCommentDiv>\n  )\n}\n\nexport default BottomComment\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\LikeToggle.js",["203","204"],"import React, { useState } from \"react\"\nimport { Button } from \"antd\"\nimport { LikeOutlined, LikeFilled } from \"@ant-design/icons\"\nimport styled from \"styled-components\"\nimport Axios from \"axios\"\n\nconst LikeToggleDiv = styled.div`\n  height: 185px;\n  z-index: 10;\n  position: relative;\n  background: white;\n  button {\n    border: none;\n    color: #40a9ff;\n    svg {\n      width: 25px;\n      height: 25px;\n    }\n  }\n  button:hover, button:focus, button:active, button::after {\n    outline: none;\n    border: none;\n    box-shadow: none !important;\n  }\n`\nconst LikeToggle = (props) => {\n\n  return (\n    <LikeToggleDiv>\n      <Button onClick={props.onToggleLike}>\n        { props.toggle ?\n          <div>\n            <LikeFilled />\n            <span>{props.likeCount}</span>\n          </div>\n          :\n          <div>\n            <LikeOutlined />\n            <span>{props.likeCount}</span>\n          </div>\n        }\n      </Button>\n    </LikeToggleDiv>\n  )\n}\n\nexport default LikeToggle\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\Detail\\Sections\\TopMaster.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\Sections\\SearchButton.js",["205","206"],"import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { Swiper, SwiperSlide } from \"swiper/react\"\nimport \"swiper/swiper.min.css\"\nimport \"swiper/components/pagination/pagination.min.css\"\nimport \"swiper/components/navigation/navigation.min.css\"\nimport SwiperCore, { Navigation } from \"swiper/core\"\nimport { CheckOutlined } from \"@ant-design/icons\"\n\nconst SearchButtonDiv = styled.div`\n  padding: 3rem 0;\n  width: 100%;\n  .swiper-button-next, .swiper-button-prev {\n    color: black;\n  }\n  .swiper-button-next {\n    padding-left: 30px;\n  }\n  .swiper-button-prev {\n    padding-right: 30px;\n  }\n  .swiper-button-next:after, .swiper-button-prev:after {\n    font-size: 17px;\n    font-weight: bold;\n  }\n  .swiper-slide {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    div {\n      width: 62px;\n      height: 62px;\n      border-radius: 50%;\n      background-color: rgb(240, 243, 243);\n      display: flex;\n      -webkit-box-pack: center;\n      justify-content: center;\n      -webkit-box-align: center;\n      align-items: center;\n      position: relative;\n      span {\n        color: white;\n      }\n    }\n    div.checked {\n      content: \"\";\n      inset: 0px;\n      border-radius: 50%;\n      background-color: rgb(23, 161, 255);\n      mix-blend-mode: normal;\n      opacity: 0.8;\n    }\n  }\n`\n\nconst SearchButton = () => {\n  const [checkStatus, setCheckStatus] = useState([])\n\n  useEffect(() => {\n    let arr = []\n    arr[0] = \"checked\"\n    setCheckStatus(arr)\n  }, [])\n\n  const onTest = (e) => {\n\n    console.log(\"ab\");\n  }\n\n  return (\n    <SearchButtonDiv>\n      <Swiper\n        slidesPerView={8}\n        navigation={true}\n      >\n        <SwiperSlide>\n          <div className={checkStatus[0]} onClick={onTest}>\n            <CheckOutlined />\n          </div>\n          <span>전체</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>생활</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>여행</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>문화</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>경제</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>기타</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>test</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>test</span>\n        </SwiperSlide>\n        <SwiperSlide>\n          <div>\n\n          </div>\n          <span>test</span>\n        </SwiperSlide>\n      </Swiper>\n    </SearchButtonDiv>\n  )\n}\n\nexport default SearchButton\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\TimelineSearch\\Sections\\SearchWord.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\ManageTimeline\\Sections\\ModifyTimeline.js",["207","208","209"],"import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { Form, Input, Select, Button, Divider, Tag } from \"antd\"\nimport { useHistory } from \"react-router-dom\"\nimport Axios from \"axios\"\nimport { PlusCircleOutlined, CloseOutlined } from \"@ant-design/icons\"\nimport TimelineDetail from \"../../CreateTimeline/Sections/TimelineDetail\"\nimport { useSelector } from \"react-redux\"\nimport TimelineView from \"../../CreateTimeline/Sections/TimelineView\"\nimport UploadImage from \"../../CreateTimeline/Sections/UploadImage\"\n\nconst ModifyTimelineDiv = styled.div`\n  padding: 3rem 0;\n  form {\n    width: 100%;\n    padding: 3rem;\n    display: inline-block;\n    .ant-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      .ant-form-item-label {\n        text-align: center;\n      }\n    }\n    .ant-form-item:last-child {\n      .ant-form-item-control-input-content {\n        div:nth-child(2) {\n          margin-top: 20px;\n          align-items: center;\n          display: flex;\n          justify-content: center;\n        }\n      }\n    }\n    label {\n      margin-bottom: 1rem;\n    }\n    a button {\n      width: 100%;\n      background: black;\n      color: #ffffff;\n      margin-top: 100px;\n    }\n  }\n`\n\nconst ModifyDetailDiv = styled.div`\n  display: flex;\n  width: 100%;\n  div {\n    width: 100%;\n  }\n`\n\nconst { Option } = Select\n\nconst ModifyTimeline = (props) => {\n  const [title, setTitle] = useState(\"\")\n  const [countList, setCountList] = useState([0])\n  const [detailTitle, setDetailTitle] = useState([])\n  const [detailDate, setDetailDate] = useState([])\n  const [detailDateString, setDetailDateString] = useState([])\n  const [detailContent, setDetailContent] = useState([])\n  const [category, setCategory] = useState(\"\")\n  const [complete, setComplete] = useState(false)\n  const [open, setOpen] = useState(false)\n  const [files, setFiles] = useState([])\n  const [filepath, setFilepath] = useState(\"\")\n  const [deleteStatus, setDeleteStatus] = useState(false)\n\n  const user = useSelector(state => state.user)\n  const history = useHistory()\n\n  useEffect(() => {\n    const countArr = [...countList]\n\n    if(props.timeline[0] !== undefined && props.detail !== undefined) {\n      setTitle(props.timeline[0].title)\n      setCategory(props.timeline[0].category)\n      setComplete(props.timeline[0].complete)\n      setOpen(props.timeline[0].open)\n\n      if(props.timeline[0].filePath !== null) {\n        const path = props.timeline[0].filePath.split(\"-\")[1]\n        setFilepath(path)\n      }\n\n      props.detail.forEach((item, i) => {\n        const date = item.scheduleDate.slice(0, 4) + \"-\" + item.scheduleDate.slice(4, 6) + \"-\" + item.scheduleDate.slice(6, 8)\n        countArr[i] = i\n        detailTitle[i] = item.title\n        detailDateString[i] = date\n        detailContent[i] = item.content\n      })\n\n      setCountList(countArr)\n      setDetailTitle(detailTitle)\n      setDetailDate(detailDateString)\n      setDetailContent(detailContent)\n    }\n  }, [props.timeline, props.detail])\n\n  const onModifyTimeline = (e) => {\n\n    let formData = new FormData()\n    let variables = {\n      category: category,\n      complete: complete,\n      open: open,\n      title: title,\n    }\n\n    // 파일 업로드 안 했을 때 기본 이미지 혹은 기존 이미지 그대로 유지\n    if(files.length === 0) {\n      formData.append(\"file\", \"\")\n      // 기존에 업로드한 파일 삭제하고 재업로드 안 했을 경우 filepath \"\"로 보냄\n      if(deleteStatus) {\n        variables = {\n          category: category,\n          complete: complete,\n          open: open,\n          title: title,\n          filePath: \"\",\n          imgFullPath: \"\"\n        }\n      // 기존에 업로드한 파일 삭제한 적 없고 재업로드 안 했을 경우에도 기존/기본 파일 유지\n      } else {\n        variables = {\n          category: category,\n          complete: complete,\n          open: open,\n          title: title,\n          filePath: props.timeline[0].filePath,\n          imgFullPath: props.timeline[0].imgFullPath\n        }\n      }\n    // 파일 업로드했을 때 새로운 이미지로 교체\n    } else {\n      formData.append(\"file\", files[0])\n    }\n\n    formData.append(\"dto\", new Blob([JSON.stringify(variables)], {type: \"application/json\"}))\n\n    let detailList = []\n    let valid = true\n\n    // 타임라인이 하나도 없을 때\n    if(countList.length === 0) {\n      alert(\"1개 이상의 타임라인을 작성해 주세요\")\n      return false\n    } else if(!title) {\n      alert(\"제목을 작성해 주세요\")\n      return false\n    }\n\n    // 타임라인 상세 내용 유효성 검사\n    countList.forEach((item, i) => {\n      if(detailTitle[i] === undefined || detailTitle[i] === \"\") {\n        alert(\"타임라인 제목을 입력해 주세요\")\n        valid = false\n      } else if(detailContent[i] === undefined || detailContent[i] === \"\") {\n        alert(\"타임라인 내용을 입력해 주세요\")\n        valid = false\n      } else if(detailDate[i] === undefined || detailDate[i] === \"\") {\n        alert(\"타임라인 날짜를 입력해 주세요\")\n        valid = false\n      }\n    })\n\n    if(valid) {\n      // timeline master 수정\n      Axios.put(`/timeline/master/${props.timelineId}`, formData)\n        .then(res => {\n          if(res.data) {\n            // timeline detail 전체 삭제 후 새로 save\n            Axios.delete(`/timeline/detail/${props.timelineId}`)\n             .then(response => {\n               if(response.status === 200) {\n                 countList.forEach((item, i) => {\n                   detailList.push({\n                     \"content\": detailContent[i],\n                     \"id\": res.data.id.toString() + i.toString(),\n                     \"masterId\": res.data.id,\n                     \"scheduleDate\": detailDateString[i].replaceAll('-', ''),\n                     \"title\": detailTitle[i]\n                   })\n                 })\n\n                 Axios.post(\"/timeline/detail/save\", detailList)\n                   .then(response => {\n                     if(response.status === 200) {\n                       props.history.push(\"/mytimeline\")\n                     }\n                   })\n               }\n             })\n          }\n        })\n    }\n  }\n\n  const onChangeTitle = (e) => {\n    setTitle(e.target.value)\n  }\n\n  const onChangeDetailTitle= (e, i) => {\n    let detailTitleArr = [...detailTitle]\n\n    detailTitleArr[i] = e.target.value\n    setDetailTitle(detailTitleArr)\n  }\n\n  const onChangeDate = (date, dateString, i) => {\n    let detailDateArr = [...detailDate]\n    let detailDatestringArr = [...detailDateString]\n\n    // 날짜 선택 중복 금지\n    if(detailDatestringArr.includes(dateString)) {\n      alert(\"이미 선택한 날짜입니다\")\n      return false\n    } else {\n      detailDateArr[i] = date\n      detailDatestringArr[i] = dateString\n      setDetailDate(detailDateArr)\n      setDetailDateString(detailDatestringArr)\n    }\n  }\n\n  const onchangeDetailContent = (e, i) => {\n    let detailContentArr = [...detailContent]\n\n    detailContentArr[i] = e.target.value\n    setDetailContent(detailContentArr)\n  }\n\n  const onSelectCategory = (value) => {\n    setCategory(value)\n  }\n\n  const onSelectComplete = (value) => {\n    setComplete(value)\n  }\n\n  const onSelectOpen = (value) => {\n    setOpen(value)\n  }\n\n  const onAddDetailDiv = () => {\n    let countArr = countList.length === 0 ? [0] : [...countList]\n    let counter = countArr.slice(-1)[0]\n\n    // 타임라인 상세 영역 다 삭제해서 하나도 없을 때\n    if(countList.length === 0) {\n      setCountList(countArr)\n    // 타임라인 상세 영역 1개 이상일 때\n    } else {\n      counter += 1\n      countArr[countArr.length] = counter\n      setCountList(countArr)\n    }\n  }\n\n  const onDeleteDetailTitle = (i) => {\n    let titleArr = [...detailTitle]\n    titleArr.splice(i, 1)\n    setDetailTitle(titleArr)\n  }\n\n  const onDeleteDetailDate = (i) => {\n    let dateArr = [...detailDate]\n    let datestringArr = [...detailDateString]\n\n    dateArr.splice(i, 1)\n    datestringArr.splice(i, 1)\n    setDetailDate(dateArr)\n    setDetailDateString(datestringArr)\n  }\n\n  const onDeleteDetailContent = (i) => {\n    let contentArr = [...detailContent]\n    contentArr.splice(i, 1)\n    setDetailContent(contentArr)\n  }\n\n  const onDeleteDetail = (item, i) => {\n    let countArr = [...countList]\n    // array 값과 일치하는 것만 삭제, 일치하지 않는 것들만 남김\n    const newCountArr = countArr.filter((arr) => arr !== item)\n    setCountList(newCountArr)\n    onDeleteDetailTitle(i)\n    onDeleteDetailDate(i)\n    onDeleteDetailContent(i)\n  }\n\n  const onDrop = (files) => {\n    setFiles(files)\n  }\n\n  const onDeleteFile = () => {\n    Axios.delete(`/timeline/master/${props.timeline[0].filePath}`)\n      .then(res => {\n        if(res.status === 200) {\n          setFilepath(\"\")\n          setDeleteStatus(true)\n        }\n      })\n  }\n\n  return (\n    <ModifyTimelineDiv>\n      <h1>타임라인 수정하기</h1>\n      <br />\n      <Form onSubmit={onModifyTimeline}>\n        <div>\n          <Form.Item\n            label=\"타임라인 제목\"\n          >\n            <Input\n              type=\"text\"\n              onChange={onChangeTitle}\n              value={title}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"분야\"\n          >\n            <Select value={category} onChange={onSelectCategory}>\n              <Option value=\"생활\">생활</Option>\n              <Option value=\"여행\">여행</Option>\n              <Option value=\"문화\">문화</Option>\n              <Option value=\"경제\">경제</Option>\n              <Option value=\"기타\">기타</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"진행 여부\"\n          >\n            <Select value={complete.toString()} onChange={onSelectComplete}>\n              <Option value=\"false\">진행중</Option>\n              <Option value=\"true\">진행완료</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"공개 여부\"\n          >\n            <Select value={open.toString()} onChange={onSelectOpen}>\n              <Option value=\"false\">비공개</Option>\n              <Option value=\"true\">공개</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"이미지\"\n          >\n            <UploadImage onDrop={onDrop} />\n            {files[0] ?\n              <div>\n                <Tag color=\"black\">{files[0].path}</Tag>\n                <CloseOutlined onClick={onDeleteFile} />\n              </div>\n              :\n              filepath &&\n              <div>\n                <Tag color=\"black\">{filepath}</Tag>\n                <CloseOutlined onClick={onDeleteFile} />\n              </div>\n            }\n          </Form.Item>\n        </div>\n        <Divider />\n        <ModifyDetailDiv>\n          <div>\n            <TimelineDetail countList={countList} onDeleteDetail={onDeleteDetail} onChangeDetailTitle={onChangeDetailTitle} detailTitle={detailTitle}\n              onChangeDate={onChangeDate} detailDate={detailDate} onchangeDetailContent={onchangeDetailContent} detailContent={detailContent} detailDateString={detailDateString} />\n            <Button onClick={onAddDetailDiv}>\n              <PlusCircleOutlined />추가\n            </Button>\n          </div>\n          <div>\n            <TimelineView countList={countList} detailTitle={detailTitle} detailDateString={detailDateString} detailContent={detailContent}/>\n          </div>\n        </ModifyDetailDiv>\n        <Button size=\"large\" onClick={onModifyTimeline}>수정하기</Button>\n      </Form>\n    </ModifyTimelineDiv>\n  )\n}\nexport default ModifyTimeline\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_actions\\types.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\UploadImage.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\TimelineDetail.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\TimelineView.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\CreateTimeline\\Sections\\TimelineMaster.js",["210","211"],"import React from \"react\"\nimport { Form, Input, Select, Button, Divider, Tag } from \"antd\"\nimport UploadImage from \"./UploadImage\"\nimport { CloseOutlined } from \"@ant-design/icons\"\n\nconst { Option } = Select\n\nconst TimelineMaster = (props) => {\n  return (\n    <div>\n      <Form.Item\n        label=\"타임라인 제목\"\n        name=\"title\"\n      >\n        <Input\n          type=\"text\"\n          onChange={props.onChangeTitle}\n          value={props.title}\n          required\n        />\n      </Form.Item>\n      <Form.Item\n        label=\"분야\"\n      >\n        <Select defaultValue=\"생활\" onChange={props.onSelectCategory}>\n          <Option value=\"생활\">생활</Option>\n          <Option value=\"여행\">여행</Option>\n          <Option value=\"문화\">문화</Option>\n          <Option value=\"경제\">경제</Option>\n          <Option value=\"기타\">기타</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        label=\"진행 여부\"\n      >\n        <Select defaultValue=\"false\" onChange={props.onSelectComplete}>\n          <Option value=\"false\">진행중</Option>\n          <Option value=\"true\">진행완료</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        label=\"공개 여부\"\n      >\n        <Select defaultValue=\"false\" onChange={props.onSelectOpen}>\n          <Option value=\"false\">비공개</Option>\n          <Option value=\"true\">공개</Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        label=\"이미지\"\n      >\n        <UploadImage onDrop={props.onDrop} />\n        {props.files[0] &&\n          <div>\n            <Tag color=\"black\">{props.files[0].path}</Tag>\n            <CloseOutlined onClick={props.onDeleteFile} />\n          </div>\n        }\n      </Form.Item>\n    </div>\n  )\n}\n\nexport default TimelineMaster\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\Sections\\SomeTimeline.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\MyPage\\Sections\\MenuBar.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\NavBar\\Sections\\WebNavBar.js",["212"],"import React from \"react\"\nimport styled from \"styled-components\"\nimport { Menu, Button } from \"antd\"\nimport { Link } from \"react-router-dom\"\n\nconst Logo =  styled.div`\n  font-weight: bold;\n  font-size: 3.5vh;\n  padding: 1rem;\n  span {\n    color: #f0f0f0;\n  }\n  a {\n    color: black !important;\n  }\n  + div {\n    border-bottom: 1px solid #f0f0f0;\n  }\n`\n\nconst MenuList = styled.div`\n  display: flex;\n  justify-content: space-between;\n  .ant-menu-overflow-item.ant-menu-item {\n    position: relative !important;\n  }\n`\n\n\nconst WebNavBar = (props) => {\n  return (\n    <>\n      <Logo>\n        <Link to=\"/\">\n          TI<span>MELI</span>NE\n        </Link>\n      </Logo>\n      <MenuList>\n        <Menu selectedKeys=\"mail\" mode=\"horizontal\">\n          <Menu.Item key=\"timeline\">\n            <Link to=\"/search/timeline\">\n              타임라인\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"class\">\n            클래스\n          </Menu.Item>\n        </Menu>\n        <Menu mode=\"horizontal\">\n          <Menu.Item key=\"mypage\">\n            <Link to=\"/mypage\">\n              마이페이지\n            </Link>\n          </Menu.Item>\n          { props.auth ?\n          <>\n            <Menu.Item key=\"logout\" onClick={props.onLogout}>\n              로그아웃\n            </Menu.Item>\n          </>\n          :\n          <>\n            <Menu.Item key=\"login\">\n              <Link to=\"/login\">\n                로그인\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"signup\">\n              <Link to=\"/signup\">\n                회원가입\n              </Link>\n            </Menu.Item>\n          </>\n          }\n        </Menu>\n      </MenuList>\n    </>\n  )\n}\n\nexport default WebNavBar\n","C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\components\\NavBar\\Sections\\MobileNavBar.js",[],"C:\\dev\\springboot\\workplace\\tiltest3\\src\\main\\frontend\\src\\_actions\\user_actions.js",[],{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":69,"column":10,"nodeType":"219","endLine":69,"endColumn":19,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":3,"column":10,"nodeType":"223","messageId":"224","endLine":3,"endColumn":21},{"ruleId":"221","severity":1,"message":"225","line":11,"column":19,"nodeType":"223","messageId":"224","endLine":11,"endColumn":28},{"ruleId":"221","severity":1,"message":"226","line":54,"column":22,"nodeType":"223","messageId":"224","endLine":54,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":5,"column":10,"nodeType":"223","messageId":"224","endLine":5,"endColumn":21},{"ruleId":"221","severity":1,"message":"227","line":6,"column":10,"nodeType":"223","messageId":"224","endLine":6,"endColumn":14},{"ruleId":"228","severity":1,"message":"229","line":45,"column":13,"nodeType":"230","endLine":45,"endColumn":38},{"ruleId":"221","severity":1,"message":"231","line":55,"column":10,"nodeType":"223","messageId":"224","endLine":55,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":6,"column":10,"nodeType":"223","messageId":"224","endLine":6,"endColumn":21},{"ruleId":"217","severity":1,"message":"232","line":34,"column":6,"nodeType":"219","endLine":34,"endColumn":18,"suggestions":"233"},{"ruleId":"217","severity":1,"message":"234","line":91,"column":6,"nodeType":"219","endLine":91,"endColumn":8,"suggestions":"235"},{"ruleId":"217","severity":1,"message":"236","line":120,"column":6,"nodeType":"219","endLine":120,"endColumn":18,"suggestions":"237"},{"ruleId":"221","severity":1,"message":"238","line":202,"column":9,"nodeType":"223","messageId":"224","endLine":202,"endColumn":18},{"ruleId":"221","severity":1,"message":"239","line":85,"column":10,"nodeType":"223","messageId":"224","endLine":85,"endColumn":19},{"ruleId":"221","severity":1,"message":"240","line":85,"column":21,"nodeType":"223","messageId":"224","endLine":85,"endColumn":33},{"ruleId":"221","severity":1,"message":"241","line":1,"column":17,"nodeType":"223","messageId":"224","endLine":1,"endColumn":25},{"ruleId":"221","severity":1,"message":"242","line":3,"column":8,"nodeType":"223","messageId":"224","endLine":3,"endColumn":14},{"ruleId":"221","severity":1,"message":"243","line":2,"column":26,"nodeType":"223","messageId":"224","endLine":2,"endColumn":33},{"ruleId":"221","severity":1,"message":"244","line":5,"column":8,"nodeType":"223","messageId":"224","endLine":5,"endColumn":13},{"ruleId":"221","severity":1,"message":"245","line":56,"column":10,"nodeType":"223","messageId":"224","endLine":56,"endColumn":14},{"ruleId":"221","severity":1,"message":"246","line":56,"column":16,"nodeType":"223","messageId":"224","endLine":56,"endColumn":23},{"ruleId":"221","severity":1,"message":"241","line":1,"column":17,"nodeType":"223","messageId":"224","endLine":1,"endColumn":25},{"ruleId":"221","severity":1,"message":"244","line":5,"column":8,"nodeType":"223","messageId":"224","endLine":5,"endColumn":13},{"ruleId":"221","severity":1,"message":"247","line":7,"column":8,"nodeType":"223","messageId":"224","endLine":7,"endColumn":18},{"ruleId":"221","severity":1,"message":"248","line":7,"column":22,"nodeType":"223","messageId":"224","endLine":7,"endColumn":32},{"ruleId":"221","severity":1,"message":"249","line":72,"column":9,"nodeType":"223","messageId":"224","endLine":72,"endColumn":13},{"ruleId":"221","severity":1,"message":"250","line":73,"column":9,"nodeType":"223","messageId":"224","endLine":73,"endColumn":16},{"ruleId":"217","severity":1,"message":"251","line":102,"column":6,"nodeType":"219","endLine":102,"endColumn":36,"suggestions":"252"},{"ruleId":"221","severity":1,"message":"253","line":2,"column":31,"nodeType":"223","messageId":"224","endLine":2,"endColumn":37},{"ruleId":"221","severity":1,"message":"254","line":2,"column":39,"nodeType":"223","messageId":"224","endLine":2,"endColumn":46},{"ruleId":"221","severity":1,"message":"253","line":3,"column":16,"nodeType":"223","messageId":"224","endLine":3,"endColumn":22},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'removeCookie', 'removeCookies', and 'setCookie'. Either include them or remove the dependency array.","ArrayExpression",["257"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'setCookie' is assigned a value but never used.","'setCheckValid' is assigned a value but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'cookies' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'params.timelineId'. Either include it or remove the dependency array.",["258"],"React Hook useEffect has missing dependencies: 'content', 'detailDateString', 'id', 'param.timelineId', and 'title'. Either include them or remove the dependency array.",["259"],"React Hook useEffect has missing dependencies: 'comment' and 'param.timelineId'. Either include them or remove the dependency array.",["260"],"'variables' is assigned a value but never used.","'swiperRef' is assigned a value but never used.","'setSwiperRef' is assigned a value but never used.","'useState' is defined but never used.","'styled' is defined but never used.","'Tooltip' is defined but never used.","'Axios' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'SwiperCore' is defined but never used.","'Navigation' is defined but never used.","'user' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'countList', 'detailContent', 'detailDateString', and 'detailTitle'. Either include them or remove the dependency array. You can also do a functional update 'setDetailTitle(d => ...)' if you only need 'detailTitle' in the 'setDetailTitle' call.",["261"],"'Button' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},"Update the dependencies array to be: [cookies, dispatch, history, removeCookie, removeCookies, setCookie]",{"range":"272","text":"273"},"Update the dependencies array to be: [params.timelineId, props.user]",{"range":"274","text":"275"},"Update the dependencies array to be: [content, detailDateString, id, param.timelineId, title]",{"range":"276","text":"277"},"Update the dependencies array to be: [comment, param.timelineId, props.user]",{"range":"278","text":"279"},"Update the dependencies array to be: [props.timeline, props.detail, countList, detailTitle, detailDateString, detailContent]",{"range":"280","text":"281"},[2281,2290],"[cookies, dispatch, history, removeCookie, removeCookies, setCookie]",[1013,1025],"[params.timelineId, props.user]",[2991,2993],"[content, detailDateString, id, param.timelineId, title]",[3965,3977],"[comment, param.timelineId, props.user]",[3019,3049],"[props.timeline, props.detail, countList, detailTitle, detailDateString, detailContent]"]